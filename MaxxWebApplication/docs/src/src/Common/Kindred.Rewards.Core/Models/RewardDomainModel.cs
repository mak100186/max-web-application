using Kindred.Rewards.Core.Enums;
using Kindred.Rewards.Core.Models.RewardConfiguration;
using Kindred.Rewards.Core.Models.Rewards;

namespace Kindred.Rewards.Core.Models;

public class RewardDomainModel
{
    public string RewardId { get; set; }

    public bool IsNameAutoGenerated { get; set; }

    public bool IsCancelled { get; set; }

    public RewardCategory Category { get; set; }

    public RewardType Type { get; set; }

    public string CancellationReason { get; set; }

    public RewardTerms Terms { get; set; }

    public string SourceInstanceId { get; set; }

    public string Name { get; set; }

    public string Comments { get; set; }

    public string RewardRules { get; set; }

    public IReadOnlyCollection<string> Tags { get; set; }

    public string CountryCode { get; set; }

    public string Jurisdiction { get; set; }
    public string State { get; set; }
    public string CurrencyCode { get; set; }
    public string Brand { get; set; }

    public string Purpose { get; set; }

    public string SubPurpose { get; set; }

    public string CustomerFacingName { get; set; }

    public string CreatedBy { get; set; }

    public string UpdatedBy { get; set; }

    public string CustomerId { get; set; }

    public IList<RewardStatusDomainModel> StatusUpdates { get; set; }

    public IReadOnlyCollection<RewardTemplateDomainModel> Templates { get; set; }

    public bool IsSystemGenerated { get; set; }

    public bool IsLocked { get; set; }

    public DateTime CreatedOn { get; set; }
    public DateTime UpdatedOn { get; set; }

    public RewardStatus GetCurrentStatus()
    {
        if (IsCancelled)
        {
            return RewardStatus.Cancelled;
        }

        return Terms.Restrictions.ExpiryDateTime <= DateTime.UtcNow ? RewardStatus.Expired : RewardStatus.Active;
    }

    public bool HasRewardStarted()
    {
        return Terms.Restrictions?.StartDateTime < DateTime.UtcNow;
    }
}
