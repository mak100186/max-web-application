// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kindred.Rewards.Rewards.FunctionalTests.Features.Uniboost.Settlement
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ClaimSettle")]
    [NUnit.Framework.CategoryAttribute("Acceptance")]
    [NUnit.Framework.CategoryAttribute("uniboost")]
    public partial class ClaimSettleFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Acceptance",
                "uniboost"};
        
#line 1 "SettleRewards.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Uniboost/Settlement", "ClaimSettle", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table384 = new TechTalk.SpecFlow.Table(new string[] {
                        "combinationRn",
                        "selectionOutcomes"});
            table384.AddRow(new string[] {
                        "ksp:combination.1:c0640978-231d-405c-8ff5-f767b57a5eac:1:1",
                        "barcaWin"});
#line 5
    testRunner.Given("a bet \'ksp:bet.1:c0640978-231d-405c-8ff5-f767b57a5eac:1\' for customer \'918737\' th" +
                    "at has formulae \'singles\' and stake \'14\' with the combinations:", ((string)(null)), table384, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table385 = new TechTalk.SpecFlow.Table(new string[] {
                        "outcome",
                        "price",
                        "market"});
            table385.AddRow(new string[] {
                        "barcaWin",
                        "1.2",
                        "ksp:market.1:[basketball:201711202200:barca_vs_liverpool]:1x2"});
#line 8
    testRunner.And("the bet \'ksp:bet.1:c0640978-231d-405c-8ff5-f767b57a5eac:1\' has the following stag" +
                    "es:", ((string)(null)), table385, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Settling a claimed UniBoost for a singles without previous settlement should retu" +
            "rn previous as zero in first response")]
        [NUnit.Framework.CategoryAttribute("singles")]
        public void SettlingAClaimedUniBoostForASinglesWithoutPreviousSettlementShouldReturnPreviousAsZeroInFirstResponse()
        {
            string[] tagsOfScenario = new string[] {
                    "singles"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Settling a claimed UniBoost for a singles without previous settlement should retu" +
                    "rn previous as zero in first response", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table386 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "allowedFormulae",
                            "minStages",
                            "maxStages",
                            "minCombinations",
                            "maxCombinations",
                            "customer_id"});
                table386.AddRow(new string[] {
                            "uniboost_reward_1",
                            "uniboost",
                            "singles",
                            "1",
                            "1",
                            "1",
                            "1",
                            "918737"});
#line 14
    testRunner.Given("I have bonuses in the system", ((string)(null)), table386, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table387 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "template_keys"});
                table387.AddRow(new string[] {
                            "918737",
                            ""});
#line 17
    testRunner.When("I submit GetEntitlement request for following criteria:", ((string)(null)), table387, "When ");
#line hidden
                TechTalk.SpecFlow.Table table388 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "betRn"});
                table388.AddRow(new string[] {
                            "uniboost_reward_1",
                            "ksp:bet.1:c0640978-231d-405c-8ff5-f767b57a5eac:1"});
#line 20
    testRunner.When("a request to claim an entitlement is received for customer \'918737\':", ((string)(null)), table388, "When ");
#line hidden
#line 23
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table389 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table389.AddRow(new string[] {
                            "918737"});
#line 24
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918737\':", ((string)(null)), table389, "And ");
#line hidden
                TechTalk.SpecFlow.Table table390 = new TechTalk.SpecFlow.Table(new string[] {
                            "combinationRn",
                            "settlementStatus",
                            "segmentStatuses"});
                table390.AddRow(new string[] {
                            "ksp:combination.1:c0640978-231d-405c-8ff5-f767b57a5eac:1:1",
                            "Resolved",
                            "Won"});
#line 27
    testRunner.When("a request to settle the claim is received for bet \'ksp:bet.1:c0640978-231d-405c-8" +
                        "ff5-f767b57a5eac:1\' with final payoff \'12\' and combination settlement statuses:", ((string)(null)), table390, "When ");
#line hidden
#line 30
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table391 = new TechTalk.SpecFlow.Table(new string[] {
                            "payOff",
                            "prevPayOff"});
                table391.AddRow(new string[] {
                            "0.12",
                            "0"});
#line 31
    testRunner.And("the response should be:", ((string)(null)), table391, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Settling a claimed UniBoost for a singles without previous settlement should retu" +
            "rn zero if combination was lost")]
        [NUnit.Framework.CategoryAttribute("singles")]
        public void SettlingAClaimedUniBoostForASinglesWithoutPreviousSettlementShouldReturnZeroIfCombinationWasLost()
        {
            string[] tagsOfScenario = new string[] {
                    "singles"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Settling a claimed UniBoost for a singles without previous settlement should retu" +
                    "rn zero if combination was lost", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table392 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "allowedFormulae",
                            "minStages",
                            "maxStages",
                            "minCombinations",
                            "maxCombinations",
                            "customer_id"});
                table392.AddRow(new string[] {
                            "uniboost_reward_1",
                            "uniboost",
                            "singles",
                            "1",
                            "1",
                            "1",
                            "1",
                            "918737"});
#line 37
    testRunner.Given("I have bonuses in the system", ((string)(null)), table392, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table393 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "template_keys"});
                table393.AddRow(new string[] {
                            "918737",
                            ""});
#line 40
    testRunner.When("I submit GetEntitlement request for following criteria:", ((string)(null)), table393, "When ");
#line hidden
                TechTalk.SpecFlow.Table table394 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "betRn"});
                table394.AddRow(new string[] {
                            "uniboost_reward_1",
                            "ksp:bet.1:c0640978-231d-405c-8ff5-f767b57a5eac:1"});
#line 43
    testRunner.When("a request to claim an entitlement is received for customer \'918737\':", ((string)(null)), table394, "When ");
#line hidden
#line 46
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table395 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table395.AddRow(new string[] {
                            "918737"});
#line 47
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918737\':", ((string)(null)), table395, "And ");
#line hidden
                TechTalk.SpecFlow.Table table396 = new TechTalk.SpecFlow.Table(new string[] {
                            "combinationRn",
                            "settlementStatus",
                            "segmentStatuses"});
                table396.AddRow(new string[] {
                            "ksp:combination.1:c0640978-231d-405c-8ff5-f767b57a5eac:1:1",
                            "Resolved",
                            "Lost,Won"});
#line 50
    testRunner.When("a request to settle the claim is received for bet \'ksp:bet.1:c0640978-231d-405c-8" +
                        "ff5-f767b57a5eac:1\' with final payoff \'12\' and combination settlement statuses:", ((string)(null)), table396, "When ");
#line hidden
#line 53
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table397 = new TechTalk.SpecFlow.Table(new string[] {
                            "payOff",
                            "prevPayOff"});
                table397.AddRow(new string[] {
                            "0",
                            "0"});
#line 54
    testRunner.And("the response should be:", ((string)(null)), table397, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Settling a claimed UniBoost for a single that starts resolved goes to pending and" +
            " then back to resolved")]
        [NUnit.Framework.CategoryAttribute("singles")]
        public void SettlingAClaimedUniBoostForASingleThatStartsResolvedGoesToPendingAndThenBackToResolved()
        {
            string[] tagsOfScenario = new string[] {
                    "singles"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Settling a claimed UniBoost for a single that starts resolved goes to pending and" +
                    " then back to resolved", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table398 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "allowedFormulae",
                            "minStages",
                            "maxStages",
                            "minCombinations",
                            "maxCombinations",
                            "customer_id"});
                table398.AddRow(new string[] {
                            "uniboost_reward_1",
                            "uniboost",
                            "singles",
                            "1",
                            "1",
                            "1",
                            "1",
                            "918737"});
#line 60
    testRunner.Given("I have bonuses in the system", ((string)(null)), table398, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table399 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "template_keys"});
                table399.AddRow(new string[] {
                            "918737",
                            ""});
#line 63
    testRunner.When("I submit GetEntitlement request for following criteria:", ((string)(null)), table399, "When ");
#line hidden
                TechTalk.SpecFlow.Table table400 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "betRn"});
                table400.AddRow(new string[] {
                            "uniboost_reward_1",
                            "ksp:bet.1:c0640978-231d-405c-8ff5-f767b57a5eac:1"});
#line 66
    testRunner.When("a request to claim an entitlement is received for customer \'918737\':", ((string)(null)), table400, "When ");
#line hidden
#line 69
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table401 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table401.AddRow(new string[] {
                            "918737"});
#line 70
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918737\':", ((string)(null)), table401, "And ");
#line hidden
                TechTalk.SpecFlow.Table table402 = new TechTalk.SpecFlow.Table(new string[] {
                            "combinationRn",
                            "settlementStatus",
                            "segmentStatuses"});
                table402.AddRow(new string[] {
                            "ksp:combination.1:c0640978-231d-405c-8ff5-f767b57a5eac:1:1",
                            "Resolved",
                            "Won"});
#line 73
    testRunner.When("a request to settle the claim is received for bet \'ksp:bet.1:c0640978-231d-405c-8" +
                        "ff5-f767b57a5eac:1\' with final payoff \'12\' and combination settlement statuses:", ((string)(null)), table402, "When ");
#line hidden
#line 76
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table403 = new TechTalk.SpecFlow.Table(new string[] {
                            "payOff",
                            "prevPayOff"});
                table403.AddRow(new string[] {
                            "0.12",
                            "0"});
#line 77
    testRunner.And("the response should be:", ((string)(null)), table403, "And ");
#line hidden
                TechTalk.SpecFlow.Table table404 = new TechTalk.SpecFlow.Table(new string[] {
                            "combinationRn",
                            "settlementStatus",
                            "segmentStatuses"});
                table404.AddRow(new string[] {
                            "ksp:combination.1:c0640978-231d-405c-8ff5-f767b57a5eac:1:1",
                            "Pending",
                            "Unresolved"});
#line 80
    testRunner.When("a request to settle the claim is received for bet \'ksp:bet.1:c0640978-231d-405c-8" +
                        "ff5-f767b57a5eac:1\' with final payoff \'12\' and combination settlement statuses:", ((string)(null)), table404, "When ");
#line hidden
#line 83
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table405 = new TechTalk.SpecFlow.Table(new string[] {
                            "payOff",
                            "prevPayOff"});
                table405.AddRow(new string[] {
                            "0",
                            "0.12"});
#line 84
    testRunner.And("the response should be:", ((string)(null)), table405, "And ");
#line hidden
                TechTalk.SpecFlow.Table table406 = new TechTalk.SpecFlow.Table(new string[] {
                            "combinationRn",
                            "settlementStatus",
                            "segmentStatuses"});
                table406.AddRow(new string[] {
                            "ksp:combination.1:c0640978-231d-405c-8ff5-f767b57a5eac:1:1",
                            "Resolved",
                            "Won"});
#line 87
    testRunner.When("a request to settle the claim is received for bet \'ksp:bet.1:c0640978-231d-405c-8" +
                        "ff5-f767b57a5eac:1\' with final payoff \'12\' and combination settlement statuses:", ((string)(null)), table406, "When ");
#line hidden
#line 90
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table407 = new TechTalk.SpecFlow.Table(new string[] {
                            "payOff",
                            "prevPayOff"});
                table407.AddRow(new string[] {
                            "0.12",
                            "0"});
#line 91
    testRunner.And("the response should be:", ((string)(null)), table407, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
