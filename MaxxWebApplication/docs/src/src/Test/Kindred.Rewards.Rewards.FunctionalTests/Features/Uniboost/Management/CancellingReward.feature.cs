// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kindred.Rewards.Rewards.FunctionalTests.Features.Uniboost.Management
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Cancelling rewards")]
    public partial class CancellingRewardsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CancellingReward.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Uniboost/Management", "Cancelling rewards", "[PUT] rewards/{rewardRn}/cancel", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
            TechTalk.SpecFlow.Table table371 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "rewardType",
                        "customer_id",
                        "expiryDaysFromNow",
                        "countryCode",
                        "startDaysFromNow",
                        "comments"});
            table371.AddRow(new string[] {
                        "uniboost_8_pct_bonus",
                        "uniboost",
                        "123",
                        "",
                        "USA",
                        "",
                        ""});
#line 6
    testRunner.Given("I have bonuses in the system", ((string)(null)), table371, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cancel an existing bonus")]
        public void CancelAnExistingBonus()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel an existing bonus", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table372 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "template_keys"});
                table372.AddRow(new string[] {
                            "123",
                            "test"});
#line 12
    testRunner.When("I submit GetEntitlement request for following criteria:", ((string)(null)), table372, "When ");
#line hidden
#line 15
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table373 = new TechTalk.SpecFlow.Table(new string[] {
                            "bonus_name",
                            "promotion_name"});
                table373.AddRow(new string[] {
                            "uniboost_8_pct_bonus",
                            ""});
#line 16
    testRunner.And("GetEntitlement response should include following rewards:", ((string)(null)), table373, "And ");
#line hidden
#line 20
    testRunner.When("I submit CancelBonus request for \'uniboost_8_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
    testRunner.When("I submit GetBonus request for \'uniboost_8_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
    testRunner.And("the CancelBonus response should return cancelled bonus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table374 = new TechTalk.SpecFlow.Table(new string[] {
                            "includeCancelled",
                            "includeExpired",
                            "includeActive",
                            "customer_id"});
                table374.AddRow(new string[] {
                            "true",
                            "true",
                            "true",
                            "123"});
#line 25
    testRunner.When("I submit GetBonuses request for following criteria", ((string)(null)), table374, "When ");
#line hidden
#line 28
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
    testRunner.And("the GetBonuses response should return bonus \'uniboost_8_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table375 = new TechTalk.SpecFlow.Table(new string[] {
                            "includeCancelled",
                            "includeExpired",
                            "includeActive",
                            "customer_id"});
                table375.AddRow(new string[] {
                            "true",
                            "false",
                            "false",
                            "123"});
#line 30
    testRunner.When("I submit GetBonuses request for following criteria", ((string)(null)), table375, "When ");
#line hidden
#line 33
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
    testRunner.And("the GetBonuses response should return bonus \'uniboost_8_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table376 = new TechTalk.SpecFlow.Table(new string[] {
                            "includeCancelled",
                            "includeExpired",
                            "includeActive",
                            "customer_id"});
                table376.AddRow(new string[] {
                            "false",
                            "true",
                            "true",
                            "123"});
#line 35
    testRunner.When("I submit GetBonuses request for following criteria", ((string)(null)), table376, "When ");
#line hidden
#line 38
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
    testRunner.And("the GetBonuses response should not return bonus \'uniboost_8_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table377 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "template_keys"});
                table377.AddRow(new string[] {
                            "123",
                            "test"});
#line 41
    testRunner.When("I submit GetEntitlement request for following criteria:", ((string)(null)), table377, "When ");
#line hidden
#line 44
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table378 = new TechTalk.SpecFlow.Table(new string[] {
                            "bonus_name",
                            "promotion_name"});
                table378.AddRow(new string[] {
                            "uniboost_8_pct_bonus",
                            ""});
#line 45
    testRunner.And("GetEntitlement response should not include following rewards:", ((string)(null)), table378, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
