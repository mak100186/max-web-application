// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kindred.Rewards.Rewards.FunctionalTests.Features.Profitboost
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ProfitboostPromotion")]
    [NUnit.Framework.IgnoreAttribute("Ignored feature")]
    [NUnit.Framework.CategoryAttribute("Acceptance")]
    public partial class ProfitboostPromotionFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Acceptance",
                "ignore"};
        
#line 1 "ProfitboostPromotion.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Profitboost", "ProfitboostPromotion", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "key",
                        "comments"});
            table60.AddRow(new string[] {
                        "profitboost_promo_user",
                        "profitboost_promo_user"});
#line 5
    testRunner.Given("I have promotions templates in the system", ((string)(null)), table60, "Given ");
#line hidden
#line 8
    testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "rewardType",
                        "legTable",
                        "allowedFormulae",
                        "minStages",
                        "maxStages",
                        "minCombinations",
                        "maxCombinations"});
            table61.AddRow(new string[] {
                        "profitboost_promo_1",
                        "profitboost",
                        "{\"1\":\"10\",\"2\":\"10\",\"4\":\"0\"}",
                        "singles,doubles",
                        "1",
                        "15",
                        "1",
                        "2"});
            table61.AddRow(new string[] {
                        "profitboost_promo_2",
                        "profitboost",
                        "{\"2\":\"10\",\"4\":\"15\",\"7\":\"20\",\"10\":\"6\"}",
                        "singles",
                        "2",
                        "15",
                        "1",
                        "1"});
#line 9
    testRunner.Given("I have promotions in the system", ((string)(null)), table61, "Given ");
#line hidden
#line 13
    testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "template_key",
                        "promotions"});
            table62.AddRow(new string[] {
                        "profitboost_promo_user",
                        "profitboost_promo_1,profitboost_promo_2"});
#line 14
    testRunner.When("I submit CreateMapping request for following promotions:", ((string)(null)), table62, "When ");
#line hidden
#line 17
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "customer_id",
                        "template_keys"});
            table63.AddRow(new string[] {
                        "918791",
                        "profitboost_promo_user"});
#line 18
    testRunner.When("I submit GetEntitlement request for following criteria:", ((string)(null)), table63, "When ");
#line hidden
#line 21
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "promotion_name",
                        "bonus_name"});
            table64.AddRow(new string[] {
                        "profitboost_promo_1,profitboost_promo_2",
                        ""});
#line 22
    testRunner.And("GetEntitlement response should include following rewards:", ((string)(null)), table64, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Profitboost - Settle 1 stage claim for reward applicable to Single and Standard m" +
            "ulti")]
        [NUnit.Framework.CategoryAttribute("profitboost")]
        public void Profitboost_Settle1StageClaimForRewardApplicableToSingleAndStandardMulti()
        {
            string[] tagsOfScenario = new string[] {
                    "profitboost"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Profitboost - Settle 1 stage claim for reward applicable to Single and Standard m" +
                    "ulti", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table65.AddRow(new string[] {
                            "918791",
                            "profitboost_promo_1",
                            "1",
                            "1.5"});
#line 28
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table65, "When ");
#line hidden
#line 31
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table66.AddRow(new string[] {
                            "profitboost_promo_1"});
#line 32
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918791\':", ((string)(null)), table66, "And ");
#line hidden
                TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table67.AddRow(new string[] {
                            "profitboost_promo_1",
                            "Winning",
                            "3.00",
                            "false",
                            "918791"});
#line 35
    testRunner.When("I settle the bet for following claim", ((string)(null)), table67, "When ");
#line hidden
#line 38
    testRunner.Then("I expect to receive RewardClaimSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
    testRunner.And("I expect the correct Payout with rewardPaymentAmount of 0.15", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Profitboost - Settle 4 stage claim for reward applicable to Single and Standard m" +
            "ulti and boost is configured as zero for four legs")]
        [NUnit.Framework.CategoryAttribute("profitboost")]
        public void Profitboost_Settle4StageClaimForRewardApplicableToSingleAndStandardMultiAndBoostIsConfiguredAsZeroForFourLegs()
        {
            string[] tagsOfScenario = new string[] {
                    "profitboost"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Profitboost - Settle 4 stage claim for reward applicable to Single and Standard m" +
                    "ulti and boost is configured as zero for four legs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table68.AddRow(new string[] {
                            "918791",
                            "profitboost_promo_1",
                            "1",
                            "1.5,1.5,2.0,1.1"});
#line 43
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table68, "When ");
#line hidden
#line 46
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table69.AddRow(new string[] {
                            "profitboost_promo_1"});
#line 47
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918791\':", ((string)(null)), table69, "And ");
#line hidden
                TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table70.AddRow(new string[] {
                            "profitboost_promo_1",
                            "Winning",
                            "3.00",
                            "false",
                            "918791"});
#line 50
    testRunner.When("I settle the bet for following claim", ((string)(null)), table70, "When ");
#line hidden
#line 53
    testRunner.Then("I expect to receive RewardClaimSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
    testRunner.And("I expect the correct Payout with rewardPaymentAmount of 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Profitboost - Settle 3 stage claim for reward applicable to Single and Standard m" +
            "ulti")]
        [NUnit.Framework.CategoryAttribute("profitboost")]
        public void Profitboost_Settle3StageClaimForRewardApplicableToSingleAndStandardMulti()
        {
            string[] tagsOfScenario = new string[] {
                    "profitboost"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Profitboost - Settle 3 stage claim for reward applicable to Single and Standard m" +
                    "ulti", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table71.AddRow(new string[] {
                            "918791",
                            "profitboost_promo_1",
                            "1",
                            "1.5,1.5,2.0"});
#line 58
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table71, "When ");
#line hidden
#line 61
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table72.AddRow(new string[] {
                            "profitboost_promo_1"});
#line 62
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918791\':", ((string)(null)), table72, "And ");
#line hidden
                TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table73.AddRow(new string[] {
                            "profitboost_promo_1",
                            "Winning",
                            "3.00",
                            "false",
                            "918791"});
#line 65
    testRunner.When("I settle the bet for following claim", ((string)(null)), table73, "When ");
#line hidden
#line 68
    testRunner.Then("I expect to receive RewardClaimSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 69
    testRunner.And("I expect the correct Payout with rewardPaymentAmount of 1.05", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Profitboost - Settle 3 stage claim for reward applicable to Single and Standard m" +
            "ulti with maxWin cap applied")]
        [NUnit.Framework.CategoryAttribute("profitboost")]
        public void Profitboost_Settle3StageClaimForRewardApplicableToSingleAndStandardMultiWithMaxWinCapApplied()
        {
            string[] tagsOfScenario = new string[] {
                    "profitboost"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Profitboost - Settle 3 stage claim for reward applicable to Single and Standard m" +
                    "ulti with maxWin cap applied", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table74.AddRow(new string[] {
                            "918791",
                            "profitboost_promo_1",
                            "1",
                            "1.5,10.5,20.0"});
#line 73
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table74, "When ");
#line hidden
#line 76
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table75.AddRow(new string[] {
                            "profitboost_promo_1"});
#line 77
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918791\':", ((string)(null)), table75, "And ");
#line hidden
                TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table76.AddRow(new string[] {
                            "profitboost_promo_1",
                            "Winning",
                            "3.00",
                            "false",
                            "918791"});
#line 80
    testRunner.When("I settle the bet for following claim", ((string)(null)), table76, "When ");
#line hidden
#line 83
    testRunner.Then("I expect to receive RewardClaimSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
    testRunner.And("I expect the correct Payout with rewardPaymentAmount of 94.2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Profitboost - Settle 2 stage claim for reward applicable to Standard multi")]
        [NUnit.Framework.CategoryAttribute("profitboost")]
        public void Profitboost_Settle2StageClaimForRewardApplicableToStandardMulti()
        {
            string[] tagsOfScenario = new string[] {
                    "profitboost"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Profitboost - Settle 2 stage claim for reward applicable to Standard multi", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 87
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table77.AddRow(new string[] {
                            "918791",
                            "profitboost_promo_2",
                            "1",
                            "1.5,1.5"});
#line 88
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table77, "When ");
#line hidden
#line 91
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table78.AddRow(new string[] {
                            "profitboost_promo_2"});
#line 92
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918791\':", ((string)(null)), table78, "And ");
#line hidden
                TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table79.AddRow(new string[] {
                            "profitboost_promo_2",
                            "Winning",
                            "3.00",
                            "false",
                            "918791"});
#line 95
    testRunner.When("I settle the bet for following claim", ((string)(null)), table79, "When ");
#line hidden
#line 98
    testRunner.Then("I expect to receive RewardClaimSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 99
    testRunner.And("I expect the correct Payout with rewardPaymentAmount of 0.375", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Profitboost - Settle 7 stage claim for reward applicable to Standard multi")]
        [NUnit.Framework.CategoryAttribute("profitboost")]
        public void Profitboost_Settle7StageClaimForRewardApplicableToStandardMulti()
        {
            string[] tagsOfScenario = new string[] {
                    "profitboost"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Profitboost - Settle 7 stage claim for reward applicable to Standard multi", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 102
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table80.AddRow(new string[] {
                            "918791",
                            "profitboost_promo_2",
                            "1",
                            "1.5,1.5,2.0,1.1,1.3,1.1,2.0"});
#line 103
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table80, "When ");
#line hidden
#line 106
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table81.AddRow(new string[] {
                            "profitboost_promo_2"});
#line 107
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918791\':", ((string)(null)), table81, "And ");
#line hidden
                TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table82.AddRow(new string[] {
                            "profitboost_promo_2",
                            "Winning",
                            "3.00",
                            "false",
                            "918791"});
#line 110
    testRunner.When("I settle the bet for following claim", ((string)(null)), table82, "When ");
#line hidden
#line 113
    testRunner.Then("I expect to receive RewardClaimSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 114
    testRunner.And("I expect the correct Payout with rewardPaymentAmount of 7.894200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Profitboost - Settle 4 stage claim for reward applicable to Standard multi")]
        [NUnit.Framework.CategoryAttribute("profitboost")]
        public void Profitboost_Settle4StageClaimForRewardApplicableToStandardMulti()
        {
            string[] tagsOfScenario = new string[] {
                    "profitboost"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Profitboost - Settle 4 stage claim for reward applicable to Standard multi", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 117
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table83.AddRow(new string[] {
                            "918791",
                            "profitboost_promo_2",
                            "1",
                            "1.5,1.5,2.0,1.1"});
#line 118
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table83, "When ");
#line hidden
#line 121
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table84.AddRow(new string[] {
                            "profitboost_promo_2"});
#line 122
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918791\':", ((string)(null)), table84, "And ");
#line hidden
                TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table85.AddRow(new string[] {
                            "profitboost_promo_2",
                            "Winning",
                            "3.00",
                            "false",
                            "918791"});
#line 125
    testRunner.When("I settle the bet for following claim", ((string)(null)), table85, "When ");
#line hidden
#line 128
    testRunner.Then("I expect to receive RewardClaimSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 129
    testRunner.And("I expect the correct Payout with rewardPaymentAmount of 1.77750", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Profitboost - Settle 11 stage claim for reward applicable to Standard multi")]
        [NUnit.Framework.CategoryAttribute("profitboost")]
        public void Profitboost_Settle11StageClaimForRewardApplicableToStandardMulti()
        {
            string[] tagsOfScenario = new string[] {
                    "profitboost"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Profitboost - Settle 11 stage claim for reward applicable to Standard multi", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 132
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table86.AddRow(new string[] {
                            "918791",
                            "profitboost_promo_2",
                            "1",
                            "1.5,1.5,2.0,1.1,1.3,1.1,2.0,1.1,1.3,1.1,2.0"});
#line 133
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table86, "When ");
#line hidden
#line 136
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table87.AddRow(new string[] {
                            "profitboost_promo_2"});
#line 137
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918791\':", ((string)(null)), table87, "And ");
#line hidden
                TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table88.AddRow(new string[] {
                            "profitboost_promo_2",
                            "Winning",
                            "3.00",
                            "false",
                            "918791"});
#line 140
    testRunner.When("I settle the bet for following claim", ((string)(null)), table88, "When ");
#line hidden
#line 143
    testRunner.Then("I expect to receive RewardClaimSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 144
    testRunner.And("I expect the correct Payout with rewardPaymentAmount of 7.8368259600", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Profitboost - Unsettle pathway")]
        [NUnit.Framework.CategoryAttribute("profitboost")]
        public void Profitboost_UnsettlePathway()
        {
            string[] tagsOfScenario = new string[] {
                    "profitboost"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Profitboost - Unsettle pathway", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 147
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table89.AddRow(new string[] {
                            "918791",
                            "profitboost_promo_1",
                            "1",
                            "1.5"});
#line 148
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table89, "When ");
#line hidden
#line 151
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table90.AddRow(new string[] {
                            "profitboost_promo_1"});
#line 152
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918791\':", ((string)(null)), table90, "And ");
#line hidden
                TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table91.AddRow(new string[] {
                            "profitboost_promo_1",
                            "Winning",
                            "3.00",
                            "false",
                            "918791"});
#line 155
    testRunner.When("I settle the bet for following claim", ((string)(null)), table91, "When ");
#line hidden
#line 158
    testRunner.Then("I expect to receive RewardClaimSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 159
    testRunner.And("I expect the correct Payout with rewardPaymentAmount of 0.15", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table92.AddRow(new string[] {
                            "profitboost_promo_1",
                            "Losing",
                            "3.00",
                            "false",
                            "918791"});
#line 160
    testRunner.When("I unsettle the bet for following claim", ((string)(null)), table92, "When ");
#line hidden
#line 163
    testRunner.Then("I expect to receive RewardClaimUnSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 164
    testRunner.And("I expect a reverse payment of the same payout amount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
