// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kindred.Rewards.Rewards.FunctionalTests.Features.Profitboost
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ProfitboostBonus")]
    [NUnit.Framework.IgnoreAttribute("Ignored feature")]
    [NUnit.Framework.CategoryAttribute("Acceptance")]
    public partial class ProfitboostBonusFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Acceptance",
                "ignore"};
        
#line 1 "ProfitboostBonus.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Profitboost", "ProfitboostBonus", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "key",
                        "comments"});
            table27.AddRow(new string[] {
                        "profitboost_bonus_user",
                        "profitboost_bonus_user"});
#line 5
    testRunner.Given("I have promotions templates in the system", ((string)(null)), table27, "Given ");
#line hidden
#line 8
    testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "rewardType",
                        "legTable",
                        "allowedFormulae",
                        "customer_id",
                        "minStages",
                        "maxStages",
                        "minCombinations",
                        "maxCombinations",
                        "minimumStageOdds"});
            table28.AddRow(new string[] {
                        "profitboost_bonus",
                        "profitboost",
                        "{\"1\":\"10\",\"2\":\"10\",\"4\":\"0\"}",
                        "singles,doubles",
                        "918791",
                        "1",
                        "15",
                        "1",
                        "2",
                        ""});
            table28.AddRow(new string[] {
                        "profitboost_bonus_2",
                        "profitboost",
                        "{\"2\":\"10\",\"4\":\"15\",\"7\":\"20\",\"10\":\"6\"}",
                        "singles",
                        "918791",
                        "2",
                        "15",
                        "1",
                        "1",
                        ""});
#line 9
    testRunner.Given("I have bonuses in the system", ((string)(null)), table28, "Given ");
#line hidden
#line 13
    testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "customer_id",
                        "template_keys"});
            table29.AddRow(new string[] {
                        "918791",
                        "profitboost_bonus_user"});
#line 14
    testRunner.When("I submit GetEntitlement request for following criteria:", ((string)(null)), table29, "When ");
#line hidden
#line 17
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "bonus_name",
                        "promotion_name"});
            table30.AddRow(new string[] {
                        "profitboost_bonus,profitboost_bonus_2",
                        ""});
#line 18
    testRunner.And("GetEntitlement response should include following rewards:", ((string)(null)), table30, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Profitboost - Settle 1 stage claim for reward applicable to Single and Standard m" +
            "ulti")]
        [NUnit.Framework.CategoryAttribute("profitboost")]
        public void Profitboost_Settle1StageClaimForRewardApplicableToSingleAndStandardMulti()
        {
            string[] tagsOfScenario = new string[] {
                    "profitboost"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Profitboost - Settle 1 stage claim for reward applicable to Single and Standard m" +
                    "ulti", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table31.AddRow(new string[] {
                            "918791",
                            "profitboost_bonus",
                            "1",
                            "1.5"});
#line 24
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table31, "When ");
#line hidden
#line 27
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table32.AddRow(new string[] {
                            "profitboost_bonus"});
#line 28
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918791\':", ((string)(null)), table32, "And ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table33.AddRow(new string[] {
                            "profitboost_bonus",
                            "Winning",
                            "3.00",
                            "false",
                            "918791"});
#line 31
    testRunner.When("I settle the bet for following claim", ((string)(null)), table33, "When ");
#line hidden
#line 34
    testRunner.Then("I expect to receive RewardClaimSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
    testRunner.And("I expect the correct Payout with rewardPaymentAmount of 0.15", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Profitboost - Settle 4 stage claim for reward applicable to Single and Standard m" +
            "ulti and boost is configured as zero for four legs.")]
        [NUnit.Framework.CategoryAttribute("profitboost")]
        public void Profitboost_Settle4StageClaimForRewardApplicableToSingleAndStandardMultiAndBoostIsConfiguredAsZeroForFourLegs_()
        {
            string[] tagsOfScenario = new string[] {
                    "profitboost"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Profitboost - Settle 4 stage claim for reward applicable to Single and Standard m" +
                    "ulti and boost is configured as zero for four legs.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table34.AddRow(new string[] {
                            "918791",
                            "profitboost_bonus",
                            "1",
                            "1.5,1.5,2.0,1.1"});
#line 39
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table34, "When ");
#line hidden
#line 42
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table35.AddRow(new string[] {
                            "profitboost_bonus"});
#line 43
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918791\':", ((string)(null)), table35, "And ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table36.AddRow(new string[] {
                            "profitboost_bonus",
                            "Winning",
                            "3.00",
                            "false",
                            "918791"});
#line 46
    testRunner.When("I settle the bet for following claim", ((string)(null)), table36, "When ");
#line hidden
#line 49
    testRunner.Then("I expect to receive RewardClaimSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
    testRunner.And("I expect the correct Payout with rewardPaymentAmount of 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Profitboost - Settle 3 stage claim for reward applicable to Single and Standard m" +
            "ulti")]
        [NUnit.Framework.CategoryAttribute("profitboost")]
        public void Profitboost_Settle3StageClaimForRewardApplicableToSingleAndStandardMulti()
        {
            string[] tagsOfScenario = new string[] {
                    "profitboost"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Profitboost - Settle 3 stage claim for reward applicable to Single and Standard m" +
                    "ulti", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table37.AddRow(new string[] {
                            "918791",
                            "profitboost_bonus",
                            "1",
                            "1.5,1.5,2.0"});
#line 54
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table37, "When ");
#line hidden
#line 57
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table38.AddRow(new string[] {
                            "profitboost_bonus"});
#line 58
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918791\':", ((string)(null)), table38, "And ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table39.AddRow(new string[] {
                            "profitboost_bonus",
                            "Winning",
                            "3.00",
                            "false",
                            "918791"});
#line 61
    testRunner.When("I settle the bet for following claim", ((string)(null)), table39, "When ");
#line hidden
#line 64
    testRunner.Then("I expect to receive RewardClaimSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 65
    testRunner.And("I expect the correct Payout with rewardPaymentAmount of 1.050", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Profitboost - Settle 3 stage claim for reward applicable to Single and Standard m" +
            "ulti with maxWin cap applied")]
        [NUnit.Framework.CategoryAttribute("profitboost")]
        public void Profitboost_Settle3StageClaimForRewardApplicableToSingleAndStandardMultiWithMaxWinCapApplied()
        {
            string[] tagsOfScenario = new string[] {
                    "profitboost"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Profitboost - Settle 3 stage claim for reward applicable to Single and Standard m" +
                    "ulti with maxWin cap applied", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table40.AddRow(new string[] {
                            "918791",
                            "profitboost_bonus",
                            "1",
                            "1.5,10.5,20.0"});
#line 69
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table40, "When ");
#line hidden
#line 72
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table41.AddRow(new string[] {
                            "profitboost_bonus"});
#line 73
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918791\':", ((string)(null)), table41, "And ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table42.AddRow(new string[] {
                            "profitboost_bonus",
                            "Winning",
                            "3.00",
                            "false",
                            "918791"});
#line 76
    testRunner.When("I settle the bet for following claim", ((string)(null)), table42, "When ");
#line hidden
#line 79
    testRunner.Then("I expect to receive RewardClaimSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 80
    testRunner.And("I expect the correct Payout with rewardPaymentAmount of 94.20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Profitboost - Settle 2 stage claim for reward applicable to Standard multi")]
        [NUnit.Framework.CategoryAttribute("profitboost")]
        public void Profitboost_Settle2StageClaimForRewardApplicableToStandardMulti()
        {
            string[] tagsOfScenario = new string[] {
                    "profitboost"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Profitboost - Settle 2 stage claim for reward applicable to Standard multi", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table43.AddRow(new string[] {
                            "918791",
                            "profitboost_bonus_2",
                            "1",
                            "1.5,1.5"});
#line 84
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table43, "When ");
#line hidden
#line 87
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table44.AddRow(new string[] {
                            "profitboost_bonus_2"});
#line 88
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918791\':", ((string)(null)), table44, "And ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table45.AddRow(new string[] {
                            "profitboost_bonus_2",
                            "Winning",
                            "3.00",
                            "false",
                            "918791"});
#line 91
    testRunner.When("I settle the bet for following claim", ((string)(null)), table45, "When ");
#line hidden
#line 94
    testRunner.Then("I expect to receive RewardClaimSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 95
    testRunner.And("I expect the correct Payout with rewardPaymentAmount of 0.375", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Profitboost - Settle 7 stage claim for reward applicable to Standard multi")]
        [NUnit.Framework.CategoryAttribute("profitboost")]
        public void Profitboost_Settle7StageClaimForRewardApplicableToStandardMulti()
        {
            string[] tagsOfScenario = new string[] {
                    "profitboost"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Profitboost - Settle 7 stage claim for reward applicable to Standard multi", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 98
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table46.AddRow(new string[] {
                            "918791",
                            "profitboost_bonus_2",
                            "1",
                            "1.5,1.5,2.0,1.1,1.3,1.1,2.0"});
#line 99
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table46, "When ");
#line hidden
#line 102
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table47.AddRow(new string[] {
                            "profitboost_bonus_2"});
#line 103
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918791\':", ((string)(null)), table47, "And ");
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table48.AddRow(new string[] {
                            "profitboost_bonus_2",
                            "Winning",
                            "3.00",
                            "false",
                            "918791"});
#line 106
    testRunner.When("I settle the bet for following claim", ((string)(null)), table48, "When ");
#line hidden
#line 109
    testRunner.Then("I expect to receive RewardClaimSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 110
    testRunner.And("I expect the correct Payout with rewardPaymentAmount of 7.894200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Profitboost - Settle 4 stage claim for reward applicable to Standard multi")]
        [NUnit.Framework.CategoryAttribute("profitboost")]
        public void Profitboost_Settle4StageClaimForRewardApplicableToStandardMulti()
        {
            string[] tagsOfScenario = new string[] {
                    "profitboost"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Profitboost - Settle 4 stage claim for reward applicable to Standard multi", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 113
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table49.AddRow(new string[] {
                            "918791",
                            "profitboost_bonus_2",
                            "1",
                            "1.5,1.5,2.0,1.1"});
#line 114
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table49, "When ");
#line hidden
#line 117
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table50.AddRow(new string[] {
                            "profitboost_bonus_2"});
#line 118
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918791\':", ((string)(null)), table50, "And ");
#line hidden
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table51.AddRow(new string[] {
                            "profitboost_bonus_2",
                            "Winning",
                            "3.00",
                            "false",
                            "918791"});
#line 121
    testRunner.When("I settle the bet for following claim", ((string)(null)), table51, "When ");
#line hidden
#line 124
    testRunner.Then("I expect to receive RewardClaimSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 125
    testRunner.And("I expect the correct Payout with rewardPaymentAmount of 1.77750", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Profitboost - Settle 11 stage claim for reward applicable to Standard multi with " +
            "maxWin cap applied")]
        [NUnit.Framework.CategoryAttribute("profitboost")]
        public void Profitboost_Settle11StageClaimForRewardApplicableToStandardMultiWithMaxWinCapApplied()
        {
            string[] tagsOfScenario = new string[] {
                    "profitboost"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Profitboost - Settle 11 stage claim for reward applicable to Standard multi with " +
                    "maxWin cap applied", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 128
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table52.AddRow(new string[] {
                            "918791",
                            "profitboost_bonus_2",
                            "1",
                            "1.5,1.5,2.0,1.1,1.3,1.1,2.0,1.1,1.3,1.1,2.0"});
#line 129
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table52, "When ");
#line hidden
#line 132
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table53.AddRow(new string[] {
                            "profitboost_bonus_2"});
#line 133
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918791\':", ((string)(null)), table53, "And ");
#line hidden
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table54.AddRow(new string[] {
                            "profitboost_bonus_2",
                            "Winning",
                            "3.00",
                            "false",
                            "918791"});
#line 136
    testRunner.When("I settle the bet for following claim", ((string)(null)), table54, "When ");
#line hidden
#line 139
    testRunner.Then("I expect to receive RewardClaimSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 140
    testRunner.And("I expect the correct Payout with rewardPaymentAmount of 7.8368259600", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Profitboost - Settle 20 stage claim should not be allowed due to ProfitBoost conf" +
            "igured to have maximum of 15 stages")]
        [NUnit.Framework.CategoryAttribute("profitboost")]
        public void Profitboost_Settle20StageClaimShouldNotBeAllowedDueToProfitBoostConfiguredToHaveMaximumOf15Stages()
        {
            string[] tagsOfScenario = new string[] {
                    "profitboost"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Profitboost - Settle 20 stage claim should not be allowed due to ProfitBoost conf" +
                    "igured to have maximum of 15 stages", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 143
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table55.AddRow(new string[] {
                            "918791",
                            "profitboost_bonus_2",
                            "1",
                            "1.5,1.5,2.0,1.1,1.3,1.1,2.0,1.1,1.3,1.1,2.0,1.2,1.3,1.7,1.8,1.4,1.9,1.9,2.0,1.6"});
#line 144
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table55, "When ");
#line hidden
#line 147
    testRunner.Then("the HttpStatusCode should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 148
    testRunner.And("Response should contain error \'Multi bet has 20 stages which is not in allowed ra" +
                        "nge: [2-15]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Profitboost - Unsettle pathway")]
        [NUnit.Framework.CategoryAttribute("profitboost")]
        public void Profitboost_UnsettlePathway()
        {
            string[] tagsOfScenario = new string[] {
                    "profitboost"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Profitboost - Unsettle pathway", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 151
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table56.AddRow(new string[] {
                            "918791",
                            "profitboost_bonus",
                            "1",
                            "1.5"});
#line 152
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table56, "When ");
#line hidden
#line 155
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table57.AddRow(new string[] {
                            "profitboost_bonus"});
#line 156
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918791\':", ((string)(null)), table57, "And ");
#line hidden
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table58.AddRow(new string[] {
                            "profitboost_bonus",
                            "Winning",
                            "3.00",
                            "false",
                            "918791"});
#line 159
    testRunner.When("I settle the bet for following claim", ((string)(null)), table58, "When ");
#line hidden
#line 162
    testRunner.Then("I expect to receive RewardClaimSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 163
    testRunner.And("I expect the correct Payout with rewardPaymentAmount of 0.15", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table59.AddRow(new string[] {
                            "profitboost_bonus",
                            "Losing",
                            "3.00",
                            "false",
                            "918791"});
#line 164
    testRunner.When("I unsettle the bet for following claim", ((string)(null)), table59, "When ");
#line hidden
#line 167
    testRunner.Then("I expect to receive RewardClaimUnSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 168
    testRunner.And("I expect a reverse payment of the same payout amount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
