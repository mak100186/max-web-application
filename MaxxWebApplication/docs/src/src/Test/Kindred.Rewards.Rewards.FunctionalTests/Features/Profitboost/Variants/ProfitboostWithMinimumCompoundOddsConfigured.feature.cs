// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kindred.Rewards.Rewards.FunctionalTests.Features.Profitboost.Variants
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ProfitboostBonusWithMinimumCompoundOddsConfigured")]
    [NUnit.Framework.IgnoreAttribute("Ignored feature")]
    [NUnit.Framework.CategoryAttribute("Acceptance")]
    [NUnit.Framework.CategoryAttribute("variants")]
    [NUnit.Framework.CategoryAttribute("minimumcompoundodds")]
    [NUnit.Framework.CategoryAttribute("profitboost")]
    public partial class ProfitboostBonusWithMinimumCompoundOddsConfiguredFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Acceptance",
                "variants",
                "minimumcompoundodds",
                "profitboost",
                "ignore"};
        
#line 1 "ProfitboostWithMinimumCompoundOddsConfigured.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Profitboost/Variants", "ProfitboostBonusWithMinimumCompoundOddsConfigured", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table138 = new TechTalk.SpecFlow.Table(new string[] {
                        "key",
                        "comments"});
            table138.AddRow(new string[] {
                        "profitboost_bonus_user",
                        "profitboost_bonus_user"});
#line 5
    testRunner.Given("I have promotions templates in the system", ((string)(null)), table138, "Given ");
#line hidden
#line 8
    testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table139 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "rewardType",
                        "legTable",
                        "allowedFormulae",
                        "customer_id",
                        "minStages",
                        "maxStages",
                        "minCombinations",
                        "maxCombinations",
                        "minimumCompoundOdds"});
            table139.AddRow(new string[] {
                        "profitboost_bonus",
                        "profitboost",
                        "{\"1\":\"10\",\"2\":\"10\",\"4\":\"0\"}",
                        "singles,doubles",
                        "918792",
                        "1",
                        "15",
                        "1",
                        "2",
                        "1.5"});
#line 9
    testRunner.Given("I have bonuses in the system", ((string)(null)), table139, "Given ");
#line hidden
#line 12
    testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table140 = new TechTalk.SpecFlow.Table(new string[] {
                        "customer_id",
                        "template_keys"});
            table140.AddRow(new string[] {
                        "918792",
                        "profitboost_bonus_user"});
#line 13
    testRunner.When("I submit GetEntitlement request for following criteria:", ((string)(null)), table140, "When ");
#line hidden
#line 16
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table141 = new TechTalk.SpecFlow.Table(new string[] {
                        "bonus_name",
                        "promotion_name"});
            table141.AddRow(new string[] {
                        "profitboost_bonus",
                        ""});
#line 17
    testRunner.And("GetEntitlement response should include following rewards:", ((string)(null)), table141, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Claim with 1 stage that is above the configured minimum compound odds")]
        public void ClaimWith1StageThatIsAboveTheConfiguredMinimumCompoundOdds()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Claim with 1 stage that is above the configured minimum compound odds", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table142.AddRow(new string[] {
                            "918792",
                            "profitboost_bonus",
                            "1",
                            "1.5"});
#line 22
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table142, "When ");
#line hidden
#line 25
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table143.AddRow(new string[] {
                            "profitboost_bonus"});
#line 26
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918792\':", ((string)(null)), table143, "And ");
#line hidden
                TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table144.AddRow(new string[] {
                            "profitboost_bonus",
                            "Winning",
                            "3.00",
                            "false",
                            "918792"});
#line 29
    testRunner.When("I settle the bet for following claim", ((string)(null)), table144, "When ");
#line hidden
#line 32
    testRunner.Then("I expect to receive RewardClaimSettledEvent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
    testRunner.And("I expect the correct Payout with rewardPaymentAmount of 0.15", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Claim with 1 stage that is below the configured minimum compound odds")]
        public void ClaimWith1StageThatIsBelowTheConfiguredMinimumCompoundOdds()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Claim with 1 stage that is below the configured minimum compound odds", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "name",
                            "number_of_claims",
                            "stagePriceData"});
                table145.AddRow(new string[] {
                            "918792",
                            "profitboost_bonus",
                            "1",
                            "1"});
#line 36
    testRunner.When("I submit ClaimEntitlement request for following criteria for Currency \'AUD\':", ((string)(null)), table145, "When ");
#line hidden
#line 39
    testRunner.Then("the HttpStatusCode should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table146.AddRow(new string[] {
                            "profitboost_bonus"});
#line 40
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918792\':", ((string)(null)), table146, "And ");
#line hidden
                TechTalk.SpecFlow.Table table147 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "bet_outcome",
                            "stake_amount",
                            "return_as_freebet",
                            "customer_id"});
                table147.AddRow(new string[] {
                            "profitboost_bonus",
                            "Winning",
                            "3.00",
                            "false",
                            "918792"});
#line 43
    testRunner.When("I settle the bet for following claim", ((string)(null)), table147, "When ");
#line hidden
#line 46
    testRunner.Then("the HttpStatusCode should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 47
    testRunner.And("Response should contain error \'Cumulative odds fall below configured minimum: 1.5" +
                        "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
