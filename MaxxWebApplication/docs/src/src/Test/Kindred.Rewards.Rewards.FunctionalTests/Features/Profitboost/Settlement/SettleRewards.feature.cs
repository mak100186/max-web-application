// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kindred.Rewards.Rewards.FunctionalTests.Features.Profitboost.Settlement
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ClaimSettle")]
    [NUnit.Framework.CategoryAttribute("Acceptance")]
    [NUnit.Framework.CategoryAttribute("profitboost")]
    public partial class ClaimSettleFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Acceptance",
                "profitboost"};
        
#line 1 "SettleRewards.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Profitboost/Settlement", "ClaimSettle", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "combinationRn",
                        "selectionOutcomes"});
            table93.AddRow(new string[] {
                        "ksp:combination.1:c0640978-231d-405c-8ff5-f767b57a5eac:1:1",
                        "barcaWin,brazilLose"});
#line 5
    testRunner.Given("a bet \'ksp:bet.1:c0640978-231d-405c-8ff5-f767b57a5eac:1\' for customer \'123456\' th" +
                    "at has formulae \'singles\' and stake \'14\' with the combinations:", ((string)(null)), table93, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "outcome",
                        "price",
                        "market"});
            table94.AddRow(new string[] {
                        "barcaWin",
                        "1.2",
                        "ksp:market.1:[football:201711202200:barca_vs_liverpool]:1x2"});
#line 8
    testRunner.And("the bet \'ksp:bet.1:c0640978-231d-405c-8ff5-f767b57a5eac:1\' has the following stag" +
                    "es:", ((string)(null)), table94, "And ");
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "combinationRn",
                        "selectionOutcomes"});
            table95.AddRow(new string[] {
                        "ksp:combination.1:75e1f14e-4181-4db6-8e5f-c255a4ee0672:1:1",
                        "barcaWin,brazilLose"});
            table95.AddRow(new string[] {
                        "ksp:combination.1:75e1f14e-4181-4db6-8e5f-c255a4ee0672:1:2",
                        "barcaWin,australiaFourGoals"});
            table95.AddRow(new string[] {
                        "ksp:combination.1:75e1f14e-4181-4db6-8e5f-c255a4ee0672:1:3",
                        "australiaFourGoals,brazilLose"});
#line 11
    testRunner.And("a bet \'ksp:bet.1:75e1f14e-4181-4db6-8e5f-c255a4ee0672:1\' for customer \'123456\' th" +
                    "at has formulae \'doubles\' and stake \'14\' with the combinations:", ((string)(null)), table95, "And ");
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        "outcome",
                        "price",
                        "market"});
            table96.AddRow(new string[] {
                        "barcaWin",
                        "1.2",
                        "ksp:market.1:[football:201711202200:barca_vs_liverpool]:1x2"});
            table96.AddRow(new string[] {
                        "brazilLose",
                        "1.134",
                        "ksp:market.1:[football:201711202200:brazil_vs_australia]:1x2"});
            table96.AddRow(new string[] {
                        "australiaFourGoals",
                        "1.136",
                        "ksp:market.1:[football:201711202200:brazil_vs_australia]:1x2"});
#line 16
    testRunner.And("the bet \'ksp:bet.1:75e1f14e-4181-4db6-8e5f-c255a4ee0672:1\' has the following stag" +
                    "es:", ((string)(null)), table96, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Settling a claimed ProfitBoost for a singles without previous settlement should r" +
            "eturn previous as zero in first response")]
        [NUnit.Framework.CategoryAttribute("singles")]
        public void SettlingAClaimedProfitBoostForASinglesWithoutPreviousSettlementShouldReturnPreviousAsZeroInFirstResponse()
        {
            string[] tagsOfScenario = new string[] {
                    "singles"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Settling a claimed ProfitBoost for a singles without previous settlement should r" +
                    "eturn previous as zero in first response", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "legTable",
                            "allowedFormulae",
                            "minStages",
                            "maxStages",
                            "minCombinations",
                            "maxCombinations",
                            "customer_id"});
                table97.AddRow(new string[] {
                            "profitboost_reward_1",
                            "profitboost",
                            "{\"1\":\"10\",\"2\":\"10\",\"4\":\"0\"}",
                            "singles",
                            "1",
                            "1",
                            "1",
                            "1",
                            "918737"});
#line 24
    testRunner.Given("I have bonuses in the system", ((string)(null)), table97, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "template_keys"});
                table98.AddRow(new string[] {
                            "918737",
                            ""});
#line 27
    testRunner.When("I submit GetEntitlement request for following criteria:", ((string)(null)), table98, "When ");
#line hidden
                TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "betRn"});
                table99.AddRow(new string[] {
                            "profitboost_reward_1",
                            "ksp:bet.1:c0640978-231d-405c-8ff5-f767b57a5eac:1"});
#line 30
    testRunner.When("a request to claim an entitlement is received for customer \'918737\':", ((string)(null)), table99, "When ");
#line hidden
#line 33
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table100.AddRow(new string[] {
                            "918737"});
#line 34
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918737\':", ((string)(null)), table100, "And ");
#line hidden
                TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                            "combinationRn",
                            "settlementStatus",
                            "segmentStatuses"});
                table101.AddRow(new string[] {
                            "ksp:combination.1:c0640978-231d-405c-8ff5-f767b57a5eac:1:1",
                            "Resolved",
                            "Won"});
#line 37
    testRunner.When("a request to settle the claim is received for bet \'ksp:bet.1:c0640978-231d-405c-8" +
                        "ff5-f767b57a5eac:1\' with final payoff \'12\' and combination settlement statuses:", ((string)(null)), table101, "When ");
#line hidden
#line 40
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                            "payOff",
                            "prevPayOff"});
                table102.AddRow(new string[] {
                            "0.06",
                            "0"});
#line 41
    testRunner.And("the response should be:", ((string)(null)), table102, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Settling a claimed ProfitBoost for a single that starts resolved goes to pending " +
            "and then back to resolved")]
        [NUnit.Framework.CategoryAttribute("singles")]
        public void SettlingAClaimedProfitBoostForASingleThatStartsResolvedGoesToPendingAndThenBackToResolved()
        {
            string[] tagsOfScenario = new string[] {
                    "singles"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Settling a claimed ProfitBoost for a single that starts resolved goes to pending " +
                    "and then back to resolved", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "allowedFormulae",
                            "minStages",
                            "maxStages",
                            "minCombinations",
                            "maxCombinations",
                            "customer_id"});
                table103.AddRow(new string[] {
                            "profitboost_reward_1",
                            "profitboost",
                            "singles",
                            "1",
                            "1",
                            "1",
                            "1",
                            "918737"});
#line 47
    testRunner.Given("I have bonuses in the system", ((string)(null)), table103, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "template_keys"});
                table104.AddRow(new string[] {
                            "918737",
                            ""});
#line 50
    testRunner.When("I submit GetEntitlement request for following criteria:", ((string)(null)), table104, "When ");
#line hidden
                TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "betRn"});
                table105.AddRow(new string[] {
                            "profitboost_reward_1",
                            "ksp:bet.1:c0640978-231d-405c-8ff5-f767b57a5eac:1"});
#line 53
    testRunner.When("a request to claim an entitlement is received for customer \'918737\':", ((string)(null)), table105, "When ");
#line hidden
#line 56
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table106.AddRow(new string[] {
                            "918737"});
#line 57
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918737\':", ((string)(null)), table106, "And ");
#line hidden
                TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                            "combinationRn",
                            "settlementStatus",
                            "segmentStatuses"});
                table107.AddRow(new string[] {
                            "ksp:combination.1:c0640978-231d-405c-8ff5-f767b57a5eac:1:1",
                            "Resolved",
                            "Won"});
#line 60
    testRunner.When("a request to settle the claim is received for bet \'ksp:bet.1:c0640978-231d-405c-8" +
                        "ff5-f767b57a5eac:1\' with final payoff \'12\' and combination settlement statuses:", ((string)(null)), table107, "When ");
#line hidden
#line 63
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                            "payOff",
                            "prevPayOff"});
                table108.AddRow(new string[] {
                            "0.06",
                            "0"});
#line 64
    testRunner.And("the response should be:", ((string)(null)), table108, "And ");
#line hidden
                TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                            "combinationRn",
                            "settlementStatus",
                            "segmentStatuses"});
                table109.AddRow(new string[] {
                            "ksp:combination.1:c0640978-231d-405c-8ff5-f767b57a5eac:1:1",
                            "Pending",
                            "Unresolved"});
#line 67
    testRunner.When("a request to settle the claim is received for bet \'ksp:bet.1:c0640978-231d-405c-8" +
                        "ff5-f767b57a5eac:1\' with final payoff \'12\' and combination settlement statuses:", ((string)(null)), table109, "When ");
#line hidden
#line 70
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                            "payOff",
                            "prevPayOff"});
                table110.AddRow(new string[] {
                            "0",
                            "0.06"});
#line 71
    testRunner.And("the response should be:", ((string)(null)), table110, "And ");
#line hidden
                TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                            "combinationRn",
                            "settlementStatus",
                            "segmentStatuses"});
                table111.AddRow(new string[] {
                            "ksp:combination.1:c0640978-231d-405c-8ff5-f767b57a5eac:1:1",
                            "Resolved",
                            "Won"});
#line 74
    testRunner.When("a request to settle the claim is received for bet \'ksp:bet.1:c0640978-231d-405c-8" +
                        "ff5-f767b57a5eac:1\' with final payoff \'12\' and combination settlement statuses:", ((string)(null)), table111, "When ");
#line hidden
#line 77
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                            "payOff",
                            "prevPayOff"});
                table112.AddRow(new string[] {
                            "0.06",
                            "0"});
#line 78
    testRunner.And("the response should be:", ((string)(null)), table112, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Settling a claimed ProfitBoost for a doubles with previous settlement should retu" +
            "rn prev payoff as the previous cumulative reward payoff")]
        [NUnit.Framework.CategoryAttribute("doubles")]
        public void SettlingAClaimedProfitBoostForADoublesWithPreviousSettlementShouldReturnPrevPayoffAsThePreviousCumulativeRewardPayoff()
        {
            string[] tagsOfScenario = new string[] {
                    "doubles"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Settling a claimed ProfitBoost for a doubles with previous settlement should retu" +
                    "rn prev payoff as the previous cumulative reward payoff", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "legTable",
                            "allowedFormulae",
                            "minStages",
                            "maxStages",
                            "minCombinations",
                            "maxCombinations",
                            "customer_id"});
                table113.AddRow(new string[] {
                            "profitboost_reward_1",
                            "profitboost",
                            "{\"1\":\"10\",\"2\":\"10\",\"4\":\"0\"}",
                            "doubles",
                            "2",
                            "20",
                            "2",
                            "2",
                            "918737"});
#line 84
    testRunner.Given("I have bonuses in the system", ((string)(null)), table113, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "template_keys"});
                table114.AddRow(new string[] {
                            "918737",
                            ""});
#line 87
    testRunner.When("I submit GetEntitlement request for following criteria:", ((string)(null)), table114, "When ");
#line hidden
                TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "betRn"});
                table115.AddRow(new string[] {
                            "profitboost_reward_1",
                            "ksp:bet.1:75e1f14e-4181-4db6-8e5f-c255a4ee0672:1"});
#line 90
    testRunner.When("a request to claim an entitlement is received for customer \'918737\':", ((string)(null)), table115, "When ");
#line hidden
#line 93
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table116.AddRow(new string[] {
                            "918737"});
#line 94
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918737\':", ((string)(null)), table116, "And ");
#line hidden
                TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                            "combinationRn",
                            "settlementStatus",
                            "segmentStatuses"});
                table117.AddRow(new string[] {
                            "ksp:combination.1:75e1f14e-4181-4db6-8e5f-c255a4ee0672:1:1",
                            "Resolved",
                            "Won"});
#line 97
    testRunner.When("a request to settle the claim is received for bet \'ksp:bet.1:75e1f14e-4181-4db6-8" +
                        "e5f-c255a4ee0672:1\' with final payoff \'12\' and combination settlement statuses:", ((string)(null)), table117, "When ");
#line hidden
#line 100
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                            "payOff",
                            "prevPayOff"});
                table118.AddRow(new string[] {
                            "0.10824",
                            "0"});
#line 101
    testRunner.And("the response should be:", ((string)(null)), table118, "And ");
#line hidden
                TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                            "combinationRn",
                            "settlementStatus",
                            "segmentStatuses"});
                table119.AddRow(new string[] {
                            "ksp:combination.1:75e1f14e-4181-4db6-8e5f-c255a4ee0672:1:2",
                            "Resolved",
                            "Won"});
#line 104
    testRunner.When("a request to settle the claim is received for bet \'ksp:bet.1:75e1f14e-4181-4db6-8" +
                        "e5f-c255a4ee0672:1\' with final payoff \'12\' and combination settlement statuses:", ((string)(null)), table119, "When ");
#line hidden
#line 107
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                            "payOff",
                            "prevPayOff"});
                table120.AddRow(new string[] {
                            "0.21720",
                            "0.10824"});
#line 108
    testRunner.And("the response should be:", ((string)(null)), table120, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Settling a claimed ProfitBoost with one combination Lost and the second Won shoul" +
            "d return zero for first response")]
        [NUnit.Framework.CategoryAttribute("doubles")]
        public void SettlingAClaimedProfitBoostWithOneCombinationLostAndTheSecondWonShouldReturnZeroForFirstResponse()
        {
            string[] tagsOfScenario = new string[] {
                    "doubles"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Settling a claimed ProfitBoost with one combination Lost and the second Won shoul" +
                    "d return zero for first response", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 113
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "legTable",
                            "allowedFormulae",
                            "minStages",
                            "maxStages",
                            "minCombinations",
                            "maxCombinations",
                            "customer_id"});
                table121.AddRow(new string[] {
                            "profitboost_reward_1",
                            "profitboost",
                            "{\"1\":\"10\",\"2\":\"10\",\"4\":\"0\"}",
                            "doubles",
                            "2",
                            "20",
                            "2",
                            "2",
                            "918737"});
#line 114
    testRunner.Given("I have bonuses in the system", ((string)(null)), table121, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "template_keys"});
                table122.AddRow(new string[] {
                            "918737",
                            ""});
#line 117
    testRunner.When("I submit GetEntitlement request for following criteria:", ((string)(null)), table122, "When ");
#line hidden
                TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "betRn"});
                table123.AddRow(new string[] {
                            "profitboost_reward_1",
                            "ksp:bet.1:75e1f14e-4181-4db6-8e5f-c255a4ee0672:1"});
#line 120
    testRunner.When("a request to claim an entitlement is received for customer \'918737\':", ((string)(null)), table123, "When ");
#line hidden
#line 123
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table124 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table124.AddRow(new string[] {
                            "918737"});
#line 124
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918737\':", ((string)(null)), table124, "And ");
#line hidden
                TechTalk.SpecFlow.Table table125 = new TechTalk.SpecFlow.Table(new string[] {
                            "combinationRn",
                            "settlementStatus",
                            "segmentStatuses"});
                table125.AddRow(new string[] {
                            "ksp:combination.1:75e1f14e-4181-4db6-8e5f-c255a4ee0672:1:1",
                            "Resolved",
                            "Lost"});
#line 127
    testRunner.When("a request to settle the claim is received for bet \'ksp:bet.1:75e1f14e-4181-4db6-8" +
                        "e5f-c255a4ee0672:1\' with final payoff \'12\' and combination settlement statuses:", ((string)(null)), table125, "When ");
#line hidden
#line 130
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table126 = new TechTalk.SpecFlow.Table(new string[] {
                            "payOff",
                            "prevPayOff"});
                table126.AddRow(new string[] {
                            "0",
                            "0"});
#line 131
    testRunner.And("the response should be:", ((string)(null)), table126, "And ");
#line hidden
                TechTalk.SpecFlow.Table table127 = new TechTalk.SpecFlow.Table(new string[] {
                            "combinationRn",
                            "settlementStatus",
                            "segmentStatuses"});
                table127.AddRow(new string[] {
                            "ksp:combination.1:75e1f14e-4181-4db6-8e5f-c255a4ee0672:1:2",
                            "Resolved",
                            "Won"});
#line 134
    testRunner.When("a request to settle the claim is received for bet \'ksp:bet.1:75e1f14e-4181-4db6-8" +
                        "e5f-c255a4ee0672:1\' with final payoff \'12\' and combination settlement statuses:", ((string)(null)), table127, "When ");
#line hidden
#line 137
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table128 = new TechTalk.SpecFlow.Table(new string[] {
                            "payOff",
                            "prevPayOff"});
                table128.AddRow(new string[] {
                            "0.10896",
                            "0"});
#line 138
    testRunner.And("the response should be:", ((string)(null)), table128, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
