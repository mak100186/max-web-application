// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kindred.Rewards.Rewards.FunctionalTests.Features.Profitboost.Claiming
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Claim")]
    [NUnit.Framework.CategoryAttribute("Acceptance")]
    [NUnit.Framework.CategoryAttribute("profitboost")]
    public partial class ClaimFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Acceptance",
                "profitboost"};
        
#line 1 "ClaimingRewards.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Profitboost/Claiming", "Claim", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "combinationRn",
                        "selectionOutcomes"});
            table21.AddRow(new string[] {
                        "ksp:combination.1:c0640978-231d-405c-8ff5-f767b57a5eac:1:1",
                        "barcaWin,brazilLose"});
#line 5
    testRunner.Given("a bet \'ksp:bet.1:c0640978-231d-405c-8ff5-f767b57a5eac:1\' for customer \'123456\' th" +
                    "at has formulae \'singles\' and stake \'14\' with the combinations:", ((string)(null)), table21, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "outcome",
                        "price",
                        "market"});
            table22.AddRow(new string[] {
                        "barcaWin",
                        "1.2",
                        "ksp:market.1:[football:201711202200:barca_vs_liverpool]:1x2"});
#line 8
    testRunner.And("the bet \'ksp:bet.1:c0640978-231d-405c-8ff5-f767b57a5eac:1\' has the following stag" +
                    "es:", ((string)(null)), table22, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Claiming a ProfitBoost for a singles should succeed")]
        [NUnit.Framework.CategoryAttribute("singles")]
        public void ClaimingAProfitBoostForASinglesShouldSucceed()
        {
            string[] tagsOfScenario = new string[] {
                    "singles"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Claiming a ProfitBoost for a singles should succeed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "legTable",
                            "allowedFormulae",
                            "minStages",
                            "maxStages",
                            "minCombinations",
                            "maxCombinations",
                            "customer_id"});
                table23.AddRow(new string[] {
                            "profitboost_reward_1",
                            "profitboost",
                            "{\"1\":\"10\",\"2\":\"10\",\"4\":\"0\"}",
                            "singles",
                            "1",
                            "1",
                            "1",
                            "1",
                            "918737"});
#line 14
    testRunner.Given("I have bonuses in the system", ((string)(null)), table23, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "template_keys"});
                table24.AddRow(new string[] {
                            "918737",
                            ""});
#line 17
    testRunner.When("I submit GetEntitlement request for following criteria:", ((string)(null)), table24, "When ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "betRn"});
                table25.AddRow(new string[] {
                            "profitboost_reward_1",
                            "ksp:bet.1:c0640978-231d-405c-8ff5-f767b57a5eac:1"});
#line 20
    testRunner.When("a request to claim an entitlement is received for customer \'918737\':", ((string)(null)), table25, "When ");
#line hidden
#line 23
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "name"});
                table26.AddRow(new string[] {
                            "918737"});
#line 24
    testRunner.And("I expect following in the ClaimedEntitlements for the customerID=\'918737\':", ((string)(null)), table26, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
