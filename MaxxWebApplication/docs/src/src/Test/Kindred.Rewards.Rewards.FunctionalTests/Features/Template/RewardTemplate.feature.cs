// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kindred.Rewards.Rewards.FunctionalTests.Features.Template
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("RewardTemplate")]
    [NUnit.Framework.CategoryAttribute("Acceptance")]
    [NUnit.Framework.CategoryAttribute("promo-templates")]
    public partial class RewardTemplateFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Acceptance",
                "promo-templates"};
        
#line 1 "RewardTemplate.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Template", "RewardTemplate", "\tIn order to group multiple promotions to a single category. As a business user,\t" +
                    "I want to create a reward template and map multiple rewards (aka promotions)\r\n  " +
                    "  to it so that customers under the template can be linked to a reward template", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table235 = new TechTalk.SpecFlow.Table(new string[] {
                        "key",
                        "comments"});
            table235.AddRow(new string[] {
                        "freebet",
                        "freebet promo"});
            table235.AddRow(new string[] {
                        "uniboost",
                        "uniboost promo"});
#line 8
 testRunner.Given("I have promotions templates in the system", ((string)(null)), table235, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get promotion template by key")]
        [NUnit.Framework.CategoryAttribute("promo-template")]
        public void GetPromotionTemplateByKey()
        {
            string[] tagsOfScenario = new string[] {
                    "promo-template"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get promotion template by key", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 15
 testRunner.When("I submit Get request for template key \'freebet\' for ActiveState is \'null\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
 testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
 testRunner.And("Get response should return template for template key \'freebet\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get all promotion templates")]
        [NUnit.Framework.CategoryAttribute("promo-template")]
        public void GetAllPromotionTemplates()
        {
            string[] tagsOfScenario = new string[] {
                    "promo-template"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all promotion templates", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table236 = new TechTalk.SpecFlow.Table(new string[] {
                            "includeDisabled"});
                table236.AddRow(new string[] {
                            "true"});
#line 21
 testRunner.When("I submit GetAll request with following filters:", ((string)(null)), table236, "When ");
#line hidden
#line 24
 testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
 testRunner.And("GetAll response should return templates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get all promotion templates must include default templates")]
        [NUnit.Framework.CategoryAttribute("promo-template")]
        public void GetAllPromotionTemplatesMustIncludeDefaultTemplates()
        {
            string[] tagsOfScenario = new string[] {
                    "promo-template"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all promotion templates must include default templates", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table237 = new TechTalk.SpecFlow.Table(new string[] {
                            "includeDisabled"});
                table237.AddRow(new string[] {
                            "true"});
#line 29
 testRunner.When("I submit GetAll request with following filters:", ((string)(null)), table237, "When ");
#line hidden
#line 32
 testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
 testRunner.And("GetAll response should return templates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table238 = new TechTalk.SpecFlow.Table(new string[] {
                            "template"});
                table238.AddRow(new string[] {
                            "UB_NEW"});
                table238.AddRow(new string[] {
                            "UB_STANDARD"});
                table238.AddRow(new string[] {
                            "UB_VALUED_SMALL"});
                table238.AddRow(new string[] {
                            "UB_VALUED_MEDIUM"});
                table238.AddRow(new string[] {
                            "UB_VALUED_LARGE"});
                table238.AddRow(new string[] {
                            "UB_VIP_SMALL"});
                table238.AddRow(new string[] {
                            "UB_VIP_MEDIUM"});
                table238.AddRow(new string[] {
                            "UB_VIP_LARGE"});
                table238.AddRow(new string[] {
                            "NO_REWARDS"});
                table238.AddRow(new string[] {
                            "UB_NO_REWARDS_FALLBACK"});
#line 34
 testRunner.And("GetAll response should include the following templates:", ((string)(null)), table238, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Duplicate promotion template request should throw error")]
        [NUnit.Framework.CategoryAttribute("promo-template")]
        public void DuplicatePromotionTemplateRequestShouldThrowError()
        {
            string[] tagsOfScenario = new string[] {
                    "promo-template"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Duplicate promotion template request should throw error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 49
 testRunner.When("I submit Create request with template key \'freebet\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
 testRunner.Then("the HttpStatusCode should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
 testRunner.And("Response should contain error \'Promotion template exist with template key QhePSHB" +
                        "Dc3hQUQv57OuFfreebet\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get promotion template throws 404 if not found")]
        [NUnit.Framework.CategoryAttribute("promo-template")]
        public void GetPromotionTemplateThrows404IfNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "promo-template"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get promotion template throws 404 if not found", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 55
 testRunner.When("I submit Get request for template key \'FREEBET1\' for ActiveState is \'null\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 56
 testRunner.Then("the HttpStatusCode should be 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Disable promotion template")]
        [NUnit.Framework.CategoryAttribute("promo-template")]
        public void DisablePromotionTemplate()
        {
            string[] tagsOfScenario = new string[] {
                    "promo-template"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Disable promotion template", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 60
 testRunner.When("I submit Delete request for template key \'freebet\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
 testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
 testRunner.When("I submit Get request for template key \'freebet\' for ActiveState is \'mull\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
 testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
 testRunner.And("the template key \'freebet\' should be disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table239 = new TechTalk.SpecFlow.Table(new string[] {
                            "includeDisabled"});
                table239.AddRow(new string[] {
                            "false"});
#line 65
 testRunner.When("I submit GetAll request with following filters:", ((string)(null)), table239, "When ");
#line hidden
#line 68
 testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 69
 testRunner.And("GetAll response should not return template key \'freebet\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Map promotion template to promotions throws 400 if reward not found because Rn is" +
            " invalid")]
        [NUnit.Framework.CategoryAttribute("promo-template")]
        public void MapPromotionTemplateToPromotionsThrows400IfRewardNotFoundBecauseRnIsInvalid()
        {
            string[] tagsOfScenario = new string[] {
                    "promo-template"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Map promotion template to promotions throws 400 if reward not found because Rn is" +
                    " invalid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table240 = new TechTalk.SpecFlow.Table(new string[] {
                            "template_key",
                            "promotions",
                            "reward_rn"});
                table240.AddRow(new string[] {
                            "uniboost",
                            "blah",
                            "someInvalidRn"});
#line 73
 testRunner.When("I submit CreateMapping request for following rewards that do not exist:", ((string)(null)), table240, "When ");
#line hidden
#line 76
 testRunner.Then("the HttpStatusCode should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 77
 testRunner.And("Response should contain error \'Could not parse the provided RewardRns. Supported " +
                        "values are the Rn identifier or the full Rn. Provided Rns: someInvalidRn\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Map promotion template to promotions throws 404 if reward not found")]
        [NUnit.Framework.CategoryAttribute("promo-template")]
        public void MapPromotionTemplateToPromotionsThrows404IfRewardNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "promo-template"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Map promotion template to promotions throws 404 if reward not found", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table241 = new TechTalk.SpecFlow.Table(new string[] {
                            "template_key",
                            "promotions",
                            "reward_rn"});
                table241.AddRow(new string[] {
                            "uniboost",
                            "blah",
                            "20d74244-efde-49f9-bb82-e701b3a5b9f0"});
#line 81
 testRunner.When("I submit CreateMapping request for following rewards that do not exist:", ((string)(null)), table241, "When ");
#line hidden
#line 84
 testRunner.Then("the HttpStatusCode should be 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
 testRunner.And("Response should contain error \'Could not find promotions with reward keys 20d7424" +
                        "4-efde-49f9-bb82-e701b3a5b9f0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Map promotion template to promotions")]
        [NUnit.Framework.CategoryAttribute("promo-template")]
        public void MapPromotionTemplateToPromotions()
        {
            string[] tagsOfScenario = new string[] {
                    "promo-template"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Map promotion template to promotions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table242 = new TechTalk.SpecFlow.Table(new string[] {
                            "promotion_name",
                            "claim_limit"});
                table242.AddRow(new string[] {
                            "vip_odds_boost",
                            "1"});
                table242.AddRow(new string[] {
                            "standard_odds_boost",
                            "1"});
#line 89
 testRunner.When("I submit CreatePromotion request for following promotions:", ((string)(null)), table242, "When ");
#line hidden
#line 93
 testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table243 = new TechTalk.SpecFlow.Table(new string[] {
                            "template_key",
                            "promotions"});
                table243.AddRow(new string[] {
                            "uniboost",
                            "vip_odds_boost,standard_odds_boost"});
#line 94
 testRunner.When("I submit CreateMapping request for following promotions:", ((string)(null)), table243, "When ");
#line hidden
#line 97
 testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 98
 testRunner.When("I submit Get request for template key \'uniboost\' for ActiveState is \'null\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
 testRunner.Then("Get response should return template \'uniboost\' with mapped promotions \'vip_odds_b" +
                        "oost,standard_odds_boost\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cancelling Mapped Promotion Sould Not Unmap other promotions linked to Promot Tem" +
            "plate")]
        [NUnit.Framework.CategoryAttribute("promo-template")]
        public void CancellingMappedPromotionSouldNotUnmapOtherPromotionsLinkedToPromotTemplate()
        {
            string[] tagsOfScenario = new string[] {
                    "promo-template"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancelling Mapped Promotion Sould Not Unmap other promotions linked to Promot Tem" +
                    "plate", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 103
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table244 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType"});
                table244.AddRow(new string[] {
                            "oddsb1",
                            "uniboost"});
                table244.AddRow(new string[] {
                            "oddsb2",
                            "uniboost"});
#line 104
 testRunner.Given("I have promotions in the system", ((string)(null)), table244, "Given ");
#line hidden
#line 108
 testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table245 = new TechTalk.SpecFlow.Table(new string[] {
                            "template_key",
                            "promotions"});
                table245.AddRow(new string[] {
                            "uniboost",
                            "oddsb1,oddsb2"});
#line 109
 testRunner.When("I submit CreateMapping request for following promotions:", ((string)(null)), table245, "When ");
#line hidden
#line 112
 testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 113
 testRunner.When("I submit Get request for template key \'uniboost\' for ActiveState is \'null\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 114
 testRunner.Then("Get response should return template \'uniboost\' with mapped promotions \'oddsb1,odd" +
                        "sb2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 115
 testRunner.When("I submit CancelPromotion request for \'oddsb1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 116
 testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
 testRunner.When("I submit Get request for template key \'uniboost\' for ActiveState is \'null\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 118
 testRunner.Then("Get response should return template \'uniboost\' with mapped promotions \'oddsb2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Promotions When Requesting Active Promotions Should only return active promot" +
            "ions for template")]
        [NUnit.Framework.CategoryAttribute("promo-template")]
        public void GetPromotionsWhenRequestingActivePromotionsShouldOnlyReturnActivePromotionsForTemplate()
        {
            string[] tagsOfScenario = new string[] {
                    "promo-template"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Promotions When Requesting Active Promotions Should only return active promot" +
                    "ions for template", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 121
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table246 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "startDaysFromNow",
                            "expiryDaysFromNow"});
                table246.AddRow(new string[] {
                            "oddsb1",
                            "uniboost",
                            "-1",
                            "1"});
                table246.AddRow(new string[] {
                            "oddsb2",
                            "uniboost",
                            "5",
                            "10"});
#line 122
 testRunner.Given("I have promotions in the system", ((string)(null)), table246, "Given ");
#line hidden
#line 126
 testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table247 = new TechTalk.SpecFlow.Table(new string[] {
                            "template_key",
                            "promotions"});
                table247.AddRow(new string[] {
                            "uniboost",
                            "oddsb1,oddsb2"});
#line 127
 testRunner.When("I submit CreateMapping request for following promotions:", ((string)(null)), table247, "When ");
#line hidden
#line 130
 testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 131
 testRunner.When("I submit Get request for template key \'uniboost\' for ActiveState is \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 132
 testRunner.Then("Get response should return template \'uniboost\' with mapped promotions \'oddsb1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Promotions When Requesting NonActive Promotions Should only return non active" +
            " promotions for template")]
        [NUnit.Framework.CategoryAttribute("promo-template")]
        public void GetPromotionsWhenRequestingNonActivePromotionsShouldOnlyReturnNonActivePromotionsForTemplate()
        {
            string[] tagsOfScenario = new string[] {
                    "promo-template"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Promotions When Requesting NonActive Promotions Should only return non active" +
                    " promotions for template", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table248 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "startDaysFromNow",
                            "expiryDaysFromNow"});
                table248.AddRow(new string[] {
                            "oddsb1",
                            "uniboost",
                            "-1",
                            "1"});
                table248.AddRow(new string[] {
                            "oddsb2",
                            "uniboost",
                            "5",
                            "10"});
#line 136
 testRunner.Given("I have promotions in the system", ((string)(null)), table248, "Given ");
#line hidden
#line 140
 testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table249 = new TechTalk.SpecFlow.Table(new string[] {
                            "template_key",
                            "promotions"});
                table249.AddRow(new string[] {
                            "uniboost",
                            "oddsb1,oddsb2"});
#line 141
 testRunner.When("I submit CreateMapping request for following promotions:", ((string)(null)), table249, "When ");
#line hidden
#line 144
 testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 145
 testRunner.When("I submit Get request for template key \'uniboost\' for ActiveState is \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 146
 testRunner.Then("Get response should return template \'uniboost\' with mapped promotions \'oddsb2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Authenticated user creates a promotion template Should return createdBy")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("promo-template")]
        public void AuthenticatedUserCreatesAPromotionTemplateShouldReturnCreatedBy()
        {
            string[] tagsOfScenario = new string[] {
                    "promo-template",
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Authenticated user creates a promotion template Should return createdBy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 150
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table250 = new TechTalk.SpecFlow.Table(new string[] {
                            "template_key",
                            "comments",
                            "title"});
                table250.AddRow(new string[] {
                            "uniboost-blah",
                            "blah",
                            "blah-blah"});
#line 151
testRunner.Given("I submit CreatePromotion request by user \'crm-user-name\'", ((string)(null)), table250, "Given ");
#line hidden
#line 154
        testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 155
        testRunner.When("I submit Get request for template key \'uniboost-blah\' for ActiveState is \'null\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 156
     testRunner.Then("Get response should return expected createdBy field with value \'crm-user-name\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Authenticated user maps a promotion template Should return updatedBy")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("promo-template")]
        public void AuthenticatedUserMapsAPromotionTemplateShouldReturnUpdatedBy()
        {
            string[] tagsOfScenario = new string[] {
                    "promo-template",
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Authenticated user maps a promotion template Should return updatedBy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 161
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table251 = new TechTalk.SpecFlow.Table(new string[] {
                            "template_key",
                            "promotions"});
                table251.AddRow(new string[] {
                            "uniboost-blah",
                            "oddsb1,oddsb2"});
#line 162
testRunner.Given("I submit MapPromotion request by user \'crm-user-name-2\'", ((string)(null)), table251, "Given ");
#line hidden
#line 165
        testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 166
        testRunner.When("I submit Get request for template key \'uniboost-blah\' for ActiveState is \'null\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 167
     testRunner.Then("Get response should return expected updatedBy with value \'crm-user-name-2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
