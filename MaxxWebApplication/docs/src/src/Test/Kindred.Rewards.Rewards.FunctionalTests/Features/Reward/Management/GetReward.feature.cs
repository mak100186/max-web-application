// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kindred.Rewards.Rewards.FunctionalTests.Features.Reward.Management
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GetReward")]
    public partial class GetRewardFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "GetReward.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Reward/Management", "GetReward", "A short summary of the feature", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
            TechTalk.SpecFlow.Table table158 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "rewardType",
                        "customer_id",
                        "expiryDaysFromNow",
                        "countryCode",
                        "startDaysFromNow",
                        "comments"});
            table158.AddRow(new string[] {
                        "uniboost_5_pct_bonus",
                        "uniboost",
                        "321",
                        "",
                        "AUS",
                        "",
                        ""});
            table158.AddRow(new string[] {
                        "uniboost_6_pct_bonus",
                        "uniboost",
                        "123",
                        "",
                        "RUS",
                        "",
                        ""});
            table158.AddRow(new string[] {
                        "uniboost_7_pct_bonus",
                        "uniboost",
                        "123",
                        "",
                        "PAK",
                        "1",
                        ""});
            table158.AddRow(new string[] {
                        "uniboost_8_pct_bonus",
                        "uniboost",
                        "123",
                        "",
                        "USA",
                        "",
                        ""});
            table158.AddRow(new string[] {
                        "uniboost_9_pct_bonus",
                        "uniboost",
                        "123",
                        "time-in-next-daylight-saving-time-shift",
                        "CHN",
                        "",
                        ""});
            table158.AddRow(new string[] {
                        "uniboost_4_pct_bonus",
                        "uniboost",
                        "123",
                        "",
                        "FRA",
                        "1",
                        ""});
            table158.AddRow(new string[] {
                        "uniboost_3_pct_bonus",
                        "uniboost",
                        "123",
                        "20",
                        "FRA",
                        "10",
                        ""});
            table158.AddRow(new string[] {
                        "uniboost_10_pct_bonus",
                        "uniboost",
                        "123",
                        "",
                        "BEL",
                        "",
                        "comment_uniboost_10_pct_bonus"});
#line 6
    testRunner.Given("I have bonuses in the system", ((string)(null)), table158, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get valid bonus")]
        [NUnit.Framework.CategoryAttribute("bonus")]
        public void GetValidBonus()
        {
            string[] tagsOfScenario = new string[] {
                    "bonus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get valid bonus", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 19
    testRunner.When("I submit GetBonus request for \'uniboost_5_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
    testRunner.And("the GetBonus response should return bonus \'uniboost_5_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get bonus that does not exist throws 404")]
        [NUnit.Framework.CategoryAttribute("bonus")]
        public void GetBonusThatDoesNotExistThrows404()
        {
            string[] tagsOfScenario = new string[] {
                    "bonus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get bonus that does not exist throws 404", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 25
    testRunner.When("I submit GetBonus request for reward key \'8768c4e1-e897-435f-af02-c255ffd27a64\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
    testRunner.Then("the HttpStatusCode should be 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
    testRunner.And("Response should contain error \'Could not find a reward with the provided reward k" +
                        "ey 8768c4e1-e897-435f-af02-c255ffd27a64\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get bonus with rewardRn that is not a valid Rn throws 400")]
        [NUnit.Framework.CategoryAttribute("bonus")]
        public void GetBonusWithRewardRnThatIsNotAValidRnThrows400()
        {
            string[] tagsOfScenario = new string[] {
                    "bonus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get bonus with rewardRn that is not a valid Rn throws 400", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 31
    testRunner.When("I submit GetBonus request for reward key \'blah\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
    testRunner.Then("the HttpStatusCode should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
    testRunner.And("Response should contain error \'Could not parse the provided RewardRns. Supported " +
                        "values are the Rn identifier or the full Rn. Provided Rn: blah\"\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
