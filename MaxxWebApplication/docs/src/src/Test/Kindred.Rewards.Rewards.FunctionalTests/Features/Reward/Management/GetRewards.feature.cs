// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kindred.Rewards.Rewards.FunctionalTests.Features.Reward.Management
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GetRewards")]
    public partial class GetRewardsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "GetRewards.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Reward/Management", "GetRewards", "[GET] /rewards", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Rewards returns ascending records sorted by Jurisdiction")]
        [NUnit.Framework.CategoryAttribute("Jurisdiction")]
        public void GetRewardsReturnsAscendingRecordsSortedByJurisdiction()
        {
            string[] tagsOfScenario = new string[] {
                    "Jurisdiction"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Rewards returns ascending records sorted by Jurisdiction", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "jurisdiction"});
                table159.AddRow(new string[] {
                            "sorting_1",
                            "profitboost",
                            "customer_jurisdiction_asc",
                            "A"});
                table159.AddRow(new string[] {
                            "sorting_2",
                            "profitboost",
                            "customer_jurisdiction_asc",
                            "B"});
                table159.AddRow(new string[] {
                            "sorting_3",
                            "profitboost",
                            "customer_jurisdiction_asc",
                            "C"});
#line 7
    testRunner.Given("I have bonuses in the system", ((string)(null)), table159, "Given ");
#line hidden
#line 12
    testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "sortOrder",
                            "customer_id"});
                table160.AddRow(new string[] {
                            "Jurisdiction",
                            "Ascending",
                            "customer_jurisdiction_asc"});
#line 13
    testRunner.When("I submit GetRewards request with the following criteria", ((string)(null)), table160, "When ");
#line hidden
                TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "jurisdiction"});
                table161.AddRow(new string[] {
                            "sorting_1",
                            "ProfitBoost",
                            "customer_jurisdiction_asc",
                            "A"});
                table161.AddRow(new string[] {
                            "sorting_2",
                            "ProfitBoost",
                            "customer_jurisdiction_asc",
                            "B"});
                table161.AddRow(new string[] {
                            "sorting_3",
                            "ProfitBoost",
                            "customer_jurisdiction_asc",
                            "C"});
#line 16
    testRunner.Then("I expect the results in the following order for sort field \'jurisdiction\'", ((string)(null)), table161, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Rewards returns descending records sorted by Jurisdiction")]
        public void GetRewardsReturnsDescendingRecordsSortedByJurisdiction()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Rewards returns descending records sorted by Jurisdiction", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "jurisdiction"});
                table162.AddRow(new string[] {
                            "sorting_1",
                            "profitboost",
                            "customer_jurisdiction_desc",
                            "A"});
                table162.AddRow(new string[] {
                            "sorting_2",
                            "profitboost",
                            "customer_jurisdiction_desc",
                            "B"});
                table162.AddRow(new string[] {
                            "sorting_3",
                            "profitboost",
                            "customer_jurisdiction_desc",
                            "C"});
#line 23
    testRunner.Given("I have bonuses in the system", ((string)(null)), table162, "Given ");
#line hidden
#line 28
    testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "sortOrder",
                            "customer_id"});
                table163.AddRow(new string[] {
                            "Jurisdiction",
                            "Descending",
                            "customer_jurisdiction_desc"});
#line 29
    testRunner.When("I submit GetRewards request with the following criteria", ((string)(null)), table163, "When ");
#line hidden
                TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "jurisdiction"});
                table164.AddRow(new string[] {
                            "sorting_3",
                            "ProfitBoost",
                            "customer_jurisdiction_desc",
                            "C"});
                table164.AddRow(new string[] {
                            "sorting_2",
                            "ProfitBoost",
                            "customer_jurisdiction_desc",
                            "B"});
                table164.AddRow(new string[] {
                            "sorting_1",
                            "ProfitBoost",
                            "customer_jurisdiction_desc",
                            "A"});
#line 32
    testRunner.Then("I expect the results in the following order for sort field \'jurisdiction\'", ((string)(null)), table164, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Rewards returns ascending records sorted by CountryCode")]
        [NUnit.Framework.CategoryAttribute("CountryCode")]
        public void GetRewardsReturnsAscendingRecordsSortedByCountryCode()
        {
            string[] tagsOfScenario = new string[] {
                    "CountryCode"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Rewards returns ascending records sorted by CountryCode", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table165 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "countryCode"});
                table165.AddRow(new string[] {
                            "sorting_1",
                            "profitboost",
                            "customer_country_code_asc",
                            "AUS"});
                table165.AddRow(new string[] {
                            "sorting_2",
                            "profitboost",
                            "customer_country_code_asc",
                            "BEL"});
                table165.AddRow(new string[] {
                            "sorting_3",
                            "profitboost",
                            "customer_country_code_asc",
                            "CAN"});
#line 40
    testRunner.Given("I have bonuses in the system", ((string)(null)), table165, "Given ");
#line hidden
#line 45
    testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "sortOrder",
                            "customer_id"});
                table166.AddRow(new string[] {
                            "CountryCode",
                            "Ascending",
                            "customer_country_code_asc"});
#line 46
    testRunner.When("I submit GetRewards request with the following criteria", ((string)(null)), table166, "When ");
#line hidden
                TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "countryCode"});
                table167.AddRow(new string[] {
                            "sorting_1",
                            "ProfitBoost",
                            "customer_country_code_asc",
                            "AUS"});
                table167.AddRow(new string[] {
                            "sorting_2",
                            "ProfitBoost",
                            "customer_country_code_asc",
                            "BEL"});
                table167.AddRow(new string[] {
                            "sorting_3",
                            "ProfitBoost",
                            "customer_country_code_asc",
                            "CAN"});
#line 49
    testRunner.Then("I expect the results in the following order for sort field \'countryCode\'", ((string)(null)), table167, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Rewards returns descending records sorted by CountryCode")]
        public void GetRewardsReturnsDescendingRecordsSortedByCountryCode()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Rewards returns descending records sorted by CountryCode", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table168 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "countryCode"});
                table168.AddRow(new string[] {
                            "sorting_1",
                            "profitboost",
                            "customer_country_code_desc",
                            "AUS"});
                table168.AddRow(new string[] {
                            "sorting_2",
                            "profitboost",
                            "customer_country_code_desc",
                            "BEL"});
                table168.AddRow(new string[] {
                            "sorting_3",
                            "profitboost",
                            "customer_country_code_desc",
                            "CAN"});
#line 56
    testRunner.Given("I have bonuses in the system", ((string)(null)), table168, "Given ");
#line hidden
#line 61
    testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table169 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "sortOrder",
                            "customer_id"});
                table169.AddRow(new string[] {
                            "CountryCode",
                            "Descending",
                            "customer_country_code_desc"});
#line 62
    testRunner.When("I submit GetRewards request with the following criteria", ((string)(null)), table169, "When ");
#line hidden
                TechTalk.SpecFlow.Table table170 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "countryCode"});
                table170.AddRow(new string[] {
                            "sorting_3",
                            "ProfitBoost",
                            "customer_country_code_desc",
                            "CAN"});
                table170.AddRow(new string[] {
                            "sorting_2",
                            "ProfitBoost",
                            "customer_country_code_desc",
                            "BEL"});
                table170.AddRow(new string[] {
                            "sorting_1",
                            "ProfitBoost",
                            "customer_country_code_desc",
                            "AUS"});
#line 65
    testRunner.Then("I expect the results in the following order for sort field \'countryCode\'", ((string)(null)), table170, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Rewards returns ascending records sorted by RewardType")]
        [NUnit.Framework.CategoryAttribute("RewardType")]
        public void GetRewardsReturnsAscendingRecordsSortedByRewardType()
        {
            string[] tagsOfScenario = new string[] {
                    "RewardType"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Rewards returns ascending records sorted by RewardType", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table171 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id"});
                table171.AddRow(new string[] {
                            "sorting_1",
                            "profitboost",
                            "customer_reward_type_asc"});
                table171.AddRow(new string[] {
                            "sorting_2",
                            "uniboostreload",
                            "customer_reward_type_asc"});
                table171.AddRow(new string[] {
                            "sorting_3",
                            "uniboost",
                            "customer_reward_type_asc"});
#line 73
    testRunner.Given("I have bonuses in the system", ((string)(null)), table171, "Given ");
#line hidden
#line 78
    testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table172 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "sortOrder",
                            "customer_id"});
                table172.AddRow(new string[] {
                            "RewardType",
                            "Ascending",
                            "customer_reward_type_asc"});
#line 79
    testRunner.When("I submit GetRewards request with the following criteria", ((string)(null)), table172, "When ");
#line hidden
                TechTalk.SpecFlow.Table table173 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id"});
                table173.AddRow(new string[] {
                            "sorting_1",
                            "Profitboost",
                            "customer_reward_type_asc"});
                table173.AddRow(new string[] {
                            "sorting_3",
                            "Uniboost",
                            "customer_reward_type_asc"});
                table173.AddRow(new string[] {
                            "sorting_2",
                            "UniboostReload",
                            "customer_reward_type_asc"});
#line 82
    testRunner.Then("I expect the results in the following order for sort field \'rewardType\'", ((string)(null)), table173, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Rewards returns descending records sorted by RewardType")]
        public void GetRewardsReturnsDescendingRecordsSortedByRewardType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Rewards returns descending records sorted by RewardType", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table174 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id"});
                table174.AddRow(new string[] {
                            "sorting_1",
                            "profitboost",
                            "customer_reward_type_desc"});
                table174.AddRow(new string[] {
                            "sorting_2",
                            "uniboostreload",
                            "customer_reward_type_desc"});
                table174.AddRow(new string[] {
                            "sorting_3",
                            "uniboost",
                            "customer_reward_type_desc"});
#line 89
    testRunner.Given("I have bonuses in the system", ((string)(null)), table174, "Given ");
#line hidden
#line 94
    testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table175 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "sortOrder",
                            "customer_id"});
                table175.AddRow(new string[] {
                            "RewardType",
                            "Descending",
                            "customer_reward_type_desc"});
#line 95
    testRunner.When("I submit GetRewards request with the following criteria", ((string)(null)), table175, "When ");
#line hidden
                TechTalk.SpecFlow.Table table176 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id"});
                table176.AddRow(new string[] {
                            "sorting_2",
                            "UniboostReload",
                            "customer_reward_type_desc"});
                table176.AddRow(new string[] {
                            "sorting_3",
                            "Uniboost",
                            "customer_reward_type_desc"});
                table176.AddRow(new string[] {
                            "sorting_1",
                            "Profitboost",
                            "customer_reward_type_desc"});
#line 98
    testRunner.Then("I expect the results in the following order for sort field \'rewardType\'", ((string)(null)), table176, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Rewards returns ascending records sorted by CreatedBy")]
        [NUnit.Framework.CategoryAttribute("CreatedBy")]
        public void GetRewardsReturnsAscendingRecordsSortedByCreatedBy()
        {
            string[] tagsOfScenario = new string[] {
                    "CreatedBy"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Rewards returns ascending records sorted by CreatedBy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 105
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table177 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "createdBy"});
                table177.AddRow(new string[] {
                            "sorting_1",
                            "profitboost",
                            "customer_created_by_asc",
                            "Alpha"});
                table177.AddRow(new string[] {
                            "sorting_2",
                            "uniboostreload",
                            "customer_created_by_asc",
                            "Bravo"});
                table177.AddRow(new string[] {
                            "sorting_3",
                            "uniboost",
                            "customer_created_by_asc",
                            "Charlie"});
#line 106
    testRunner.Given("I have bonuses in the system", ((string)(null)), table177, "Given ");
#line hidden
#line 111
    testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table178 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "sortOrder",
                            "customer_id"});
                table178.AddRow(new string[] {
                            "CreatedBy",
                            "Ascending",
                            "customer_created_by_asc"});
#line 112
    testRunner.When("I submit GetRewards request with the following criteria", ((string)(null)), table178, "When ");
#line hidden
                TechTalk.SpecFlow.Table table179 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "createdBy"});
                table179.AddRow(new string[] {
                            "sorting_1",
                            "ProfitBoost",
                            "customer_created_by_asc",
                            "Alpha"});
                table179.AddRow(new string[] {
                            "sorting_2",
                            "UniBoostReload",
                            "customer_created_by_asc",
                            "Bravo"});
                table179.AddRow(new string[] {
                            "sorting_3",
                            "UniBoost",
                            "customer_created_by_asc",
                            "Charlie"});
#line 115
    testRunner.Then("I expect the results in the following order for sort field \'createdBy\'", ((string)(null)), table179, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Rewards returns descending records sorted by CreatedBy")]
        public void GetRewardsReturnsDescendingRecordsSortedByCreatedBy()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Rewards returns descending records sorted by CreatedBy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 121
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table180 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "createdBy"});
                table180.AddRow(new string[] {
                            "sorting_1",
                            "profitboost",
                            "customer_created_by_desc",
                            "Alpha"});
                table180.AddRow(new string[] {
                            "sorting_2",
                            "uniboostreload",
                            "customer_created_by_desc",
                            "Bravo"});
                table180.AddRow(new string[] {
                            "sorting_3",
                            "uniboost",
                            "customer_created_by_desc",
                            "Charlie"});
#line 122
    testRunner.Given("I have bonuses in the system", ((string)(null)), table180, "Given ");
#line hidden
#line 127
    testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table181 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "sortOrder",
                            "customer_id"});
                table181.AddRow(new string[] {
                            "CreatedBy",
                            "Descending",
                            "customer_created_by_desc"});
#line 128
    testRunner.When("I submit GetRewards request with the following criteria", ((string)(null)), table181, "When ");
#line hidden
                TechTalk.SpecFlow.Table table182 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "createdBy"});
                table182.AddRow(new string[] {
                            "sorting_3",
                            "UniBoost",
                            "customer_created_by_desc",
                            "Charlie"});
                table182.AddRow(new string[] {
                            "sorting_2",
                            "UniBoostReload",
                            "customer_created_by_desc",
                            "Bravo"});
                table182.AddRow(new string[] {
                            "sorting_1",
                            "ProfitBoost",
                            "customer_created_by_desc",
                            "Alpha"});
#line 131
    testRunner.Then("I expect the results in the following order for sort field \'createdBy\'", ((string)(null)), table182, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Rewards returns ascending records sorted by UpdatedBy")]
        [NUnit.Framework.CategoryAttribute("UpdatedBy")]
        public void GetRewardsReturnsAscendingRecordsSortedByUpdatedBy()
        {
            string[] tagsOfScenario = new string[] {
                    "UpdatedBy"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Rewards returns ascending records sorted by UpdatedBy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 138
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table183 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "updatedBy"});
                table183.AddRow(new string[] {
                            "sorting_1",
                            "profitboost",
                            "customer_updated_by_asc",
                            "Alpha"});
                table183.AddRow(new string[] {
                            "sorting_2",
                            "uniboostreload",
                            "customer_updated_by_asc",
                            "Bravo"});
                table183.AddRow(new string[] {
                            "sorting_3",
                            "uniboost",
                            "customer_updated_by_asc",
                            "Charlie"});
#line 139
    testRunner.Given("I have bonuses in the system", ((string)(null)), table183, "Given ");
#line hidden
#line 144
    testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table184 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "sortOrder",
                            "customer_id"});
                table184.AddRow(new string[] {
                            "UpdatedBy",
                            "Ascending",
                            "customer_updated_by_asc"});
#line 145
    testRunner.When("I submit GetRewards request with the following criteria", ((string)(null)), table184, "When ");
#line hidden
                TechTalk.SpecFlow.Table table185 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "updatedBy"});
                table185.AddRow(new string[] {
                            "sorting_1",
                            "ProfitBoost",
                            "customer_updated_by_asc",
                            "Alpha"});
                table185.AddRow(new string[] {
                            "sorting_2",
                            "UniBoostReload",
                            "customer_updated_by_asc",
                            "Bravo"});
                table185.AddRow(new string[] {
                            "sorting_3",
                            "UniBoost",
                            "customer_updated_by_asc",
                            "Charlie"});
#line 148
    testRunner.Then("I expect the results in the following order for sort field \'updatedBy\'", ((string)(null)), table185, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Rewards returns descending records sorted by UpdatedBy")]
        public void GetRewardsReturnsDescendingRecordsSortedByUpdatedBy()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Rewards returns descending records sorted by UpdatedBy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 154
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table186 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "updatedBy"});
                table186.AddRow(new string[] {
                            "sorting_1",
                            "profitboost",
                            "customer_updated_by_desc",
                            "Alpha"});
                table186.AddRow(new string[] {
                            "sorting_2",
                            "uniboostreload",
                            "customer_updated_by_desc",
                            "Bravo"});
                table186.AddRow(new string[] {
                            "sorting_3",
                            "uniboost",
                            "customer_updated_by_desc",
                            "Charlie"});
#line 155
    testRunner.Given("I have bonuses in the system", ((string)(null)), table186, "Given ");
#line hidden
#line 160
    testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table187 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "sortOrder",
                            "customer_id"});
                table187.AddRow(new string[] {
                            "UpdatedBy",
                            "Descending",
                            "customer_updated_by_desc"});
#line 161
    testRunner.When("I submit GetRewards request with the following criteria", ((string)(null)), table187, "When ");
#line hidden
                TechTalk.SpecFlow.Table table188 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "updatedBy"});
                table188.AddRow(new string[] {
                            "sorting_3",
                            "UniBoost",
                            "customer_updated_by_desc",
                            "Charlie"});
                table188.AddRow(new string[] {
                            "sorting_2",
                            "UniBoostReload",
                            "customer_updated_by_desc",
                            "Bravo"});
                table188.AddRow(new string[] {
                            "sorting_1",
                            "ProfitBoost",
                            "customer_updated_by_desc",
                            "Alpha"});
#line 164
    testRunner.Then("I expect the results in the following order for sort field \'updatedBy\'", ((string)(null)), table188, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Rewards returns ascending records sorted by StartDateTime")]
        [NUnit.Framework.CategoryAttribute("StartDateTime")]
        public void GetRewardsReturnsAscendingRecordsSortedByStartDateTime()
        {
            string[] tagsOfScenario = new string[] {
                    "StartDateTime"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Rewards returns ascending records sorted by StartDateTime", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 171
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table189 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "startDateTime"});
                table189.AddRow(new string[] {
                            "sorting_1",
                            "profitboost",
                            "customer_updated_by_asc",
                            "2018-08-18T07:22:16.0000000Z"});
                table189.AddRow(new string[] {
                            "sorting_2",
                            "uniboostreload",
                            "customer_updated_by_asc",
                            "2019-08-18T07:22:16.0000000Z"});
                table189.AddRow(new string[] {
                            "sorting_3",
                            "uniboost",
                            "customer_updated_by_asc",
                            "2020-08-18T07:22:16.0000000Z"});
#line 172
    testRunner.Given("I have bonuses in the system", ((string)(null)), table189, "Given ");
#line hidden
#line 177
    testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table190 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "sortOrder",
                            "customer_id"});
                table190.AddRow(new string[] {
                            "StartDateTime",
                            "Ascending",
                            "customer_updated_by_asc"});
#line 178
    testRunner.When("I submit GetRewards request with the following criteria", ((string)(null)), table190, "When ");
#line hidden
                TechTalk.SpecFlow.Table table191 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "startDateTime"});
                table191.AddRow(new string[] {
                            "sorting_1",
                            "ProfitBoost",
                            "customer_updated_by_asc",
                            "2018-08-18T07:22:16.0000000Z"});
                table191.AddRow(new string[] {
                            "sorting_2",
                            "UniBoostReload",
                            "customer_updated_by_asc",
                            "2019-08-18T07:22:16.0000000Z"});
                table191.AddRow(new string[] {
                            "sorting_3",
                            "UniBoost",
                            "customer_updated_by_asc",
                            "2020-08-18T07:22:16.0000000Z"});
#line 181
    testRunner.Then("I expect the results in the following order for sort field \'startDateTime\'", ((string)(null)), table191, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Rewards returns descending records sorted by StartDateTime")]
        public void GetRewardsReturnsDescendingRecordsSortedByStartDateTime()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Rewards returns descending records sorted by StartDateTime", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 187
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table192 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "startDateTime"});
                table192.AddRow(new string[] {
                            "sorting_1",
                            "profitboost",
                            "customer_updated_by_desc",
                            "2018-08-18T07:22:16.0000000Z"});
                table192.AddRow(new string[] {
                            "sorting_2",
                            "uniboostreload",
                            "customer_updated_by_desc",
                            "2019-08-18T07:22:16.0000000Z"});
                table192.AddRow(new string[] {
                            "sorting_3",
                            "uniboost",
                            "customer_updated_by_desc",
                            "2020-08-18T07:22:16.0000000Z"});
#line 188
    testRunner.Given("I have bonuses in the system", ((string)(null)), table192, "Given ");
#line hidden
#line 193
    testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table193 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "sortOrder",
                            "customer_id"});
                table193.AddRow(new string[] {
                            "StartDateTime",
                            "Descending",
                            "customer_updated_by_desc"});
#line 194
    testRunner.When("I submit GetRewards request with the following criteria", ((string)(null)), table193, "When ");
#line hidden
                TechTalk.SpecFlow.Table table194 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "startDateTime"});
                table194.AddRow(new string[] {
                            "sorting_3",
                            "UniBoost",
                            "customer_updated_by_desc",
                            "2020-08-18T07:22:16.0000000Z"});
                table194.AddRow(new string[] {
                            "sorting_2",
                            "UniBoostReload",
                            "customer_updated_by_desc",
                            "2019-08-18T07:22:16.0000000Z"});
                table194.AddRow(new string[] {
                            "sorting_1",
                            "ProfitBoost",
                            "customer_updated_by_desc",
                            "2018-08-18T07:22:16.0000000Z"});
#line 197
    testRunner.Then("I expect the results in the following order for sort field \'startDateTime\'", ((string)(null)), table194, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Rewards returns ascending records sorted by Status - one expired")]
        public void GetRewardsReturnsAscendingRecordsSortedByStatus_OneExpired()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Rewards returns ascending records sorted by Status - one expired", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 203
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table195 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "startDateTime"});
                table195.AddRow(new string[] {
                            "sorting_1",
                            "profitboost",
                            "customer_updated_by_asc",
                            "2018-08-18T07:22:16.0000000Z"});
                table195.AddRow(new string[] {
                            "sorting_2",
                            "uniboostreload",
                            "customer_updated_by_asc",
                            "2019-08-18T07:22:16.0000000Z"});
                table195.AddRow(new string[] {
                            "sorting_3",
                            "uniboost",
                            "customer_updated_by_asc",
                            "2020-08-18T07:22:16.0000000Z"});
#line 204
    testRunner.Given("I have bonuses in the system", ((string)(null)), table195, "Given ");
#line hidden
#line 209
    testRunner.And("I submit UpdateBonus request for \'sorting_3\' to expire", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table196 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "sortOrder",
                            "customer_id"});
                table196.AddRow(new string[] {
                            "Status",
                            "Ascending",
                            "customer_updated_by_asc"});
#line 210
    testRunner.When("I submit GetRewards request with the following criteria", ((string)(null)), table196, "When ");
#line hidden
                TechTalk.SpecFlow.Table table197 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "status"});
                table197.AddRow(new string[] {
                            "sorting_1",
                            "ProfitBoost",
                            "customer_updated_by_asc",
                            "Active"});
                table197.AddRow(new string[] {
                            "sorting_2",
                            "UniboostReload",
                            "customer_updated_by_asc",
                            "Active"});
                table197.AddRow(new string[] {
                            "sorting_3",
                            "Uniboost",
                            "customer_updated_by_asc",
                            "Expired"});
#line 213
    testRunner.Then("I expect the results in the following order for sort field \'Status\'", ((string)(null)), table197, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Rewards returns ascending records sorted by Status - all active - should be s" +
            "orted by start date time")]
        public void GetRewardsReturnsAscendingRecordsSortedByStatus_AllActive_ShouldBeSortedByStartDateTime()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Rewards returns ascending records sorted by Status - all active - should be s" +
                    "orted by start date time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 219
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table198 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "startDateTime"});
                table198.AddRow(new string[] {
                            "sorting_1",
                            "profitboost",
                            "customer_updated_by_asc",
                            "2018-08-18T07:22:16.0000000Z"});
                table198.AddRow(new string[] {
                            "sorting_2",
                            "uniboostreload",
                            "customer_updated_by_asc",
                            "2019-08-18T07:22:16.0000000Z"});
                table198.AddRow(new string[] {
                            "sorting_3",
                            "uniboost",
                            "customer_updated_by_asc",
                            "2020-08-18T07:22:16.0000000Z"});
#line 220
    testRunner.Given("I have bonuses in the system", ((string)(null)), table198, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table199 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "sortOrder",
                            "customer_id"});
                table199.AddRow(new string[] {
                            "Status",
                            "Ascending",
                            "customer_updated_by_asc"});
#line 225
    testRunner.When("I submit GetRewards request with the following criteria", ((string)(null)), table199, "When ");
#line hidden
                TechTalk.SpecFlow.Table table200 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "status"});
                table200.AddRow(new string[] {
                            "sorting_1",
                            "ProfitBoost",
                            "customer_updated_by_asc",
                            "Active"});
                table200.AddRow(new string[] {
                            "sorting_2",
                            "UniboostReload",
                            "customer_updated_by_asc",
                            "Active"});
                table200.AddRow(new string[] {
                            "sorting_3",
                            "Uniboost",
                            "customer_updated_by_asc",
                            "Active"});
#line 228
    testRunner.Then("I expect the results in the following order for sort field \'Status\'", ((string)(null)), table200, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Rewards returns ascending records sorted by Status - all active - should be s" +
            "orted by start date time then by name")]
        public void GetRewardsReturnsAscendingRecordsSortedByStatus_AllActive_ShouldBeSortedByStartDateTimeThenByName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Rewards returns ascending records sorted by Status - all active - should be s" +
                    "orted by start date time then by name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 234
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table201 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "startDateTime"});
                table201.AddRow(new string[] {
                            "sorting_3",
                            "uniboost",
                            "customer_updated_by_asc",
                            "2018-08-18T07:22:16.0000000Z"});
                table201.AddRow(new string[] {
                            "sorting_1",
                            "profitboost",
                            "customer_updated_by_asc",
                            "2018-08-18T07:22:16.0000000Z"});
                table201.AddRow(new string[] {
                            "sorting_2",
                            "uniboostreload",
                            "customer_updated_by_asc",
                            "2018-08-18T07:22:16.0000000Z"});
#line 235
    testRunner.Given("I have bonuses in the system", ((string)(null)), table201, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table202 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "sortOrder",
                            "customer_id"});
                table202.AddRow(new string[] {
                            "Status",
                            "Ascending",
                            "customer_updated_by_asc"});
#line 240
    testRunner.When("I submit GetRewards request with the following criteria", ((string)(null)), table202, "When ");
#line hidden
                TechTalk.SpecFlow.Table table203 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "status"});
                table203.AddRow(new string[] {
                            "sorting_1",
                            "ProfitBoost",
                            "customer_updated_by_asc",
                            "Active"});
                table203.AddRow(new string[] {
                            "sorting_2",
                            "UniboostReload",
                            "customer_updated_by_asc",
                            "Active"});
                table203.AddRow(new string[] {
                            "sorting_3",
                            "Uniboost",
                            "customer_updated_by_asc",
                            "Active"});
#line 243
    testRunner.Then("I expect the results in the following order for sort field \'Status\'", ((string)(null)), table203, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Rewards returns ascending records sorted by Status - one active, one expired " +
            "and one cancelled")]
        public void GetRewardsReturnsAscendingRecordsSortedByStatus_OneActiveOneExpiredAndOneCancelled()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Rewards returns ascending records sorted by Status - one active, one expired " +
                    "and one cancelled", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 249
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table204 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "startDateTime"});
                table204.AddRow(new string[] {
                            "sorting_1",
                            "profitboost",
                            "customer_updated_by_asc",
                            "2018-08-18T07:22:16.0000000Z"});
                table204.AddRow(new string[] {
                            "sorting_2",
                            "uniboostreload",
                            "customer_updated_by_asc",
                            "2019-08-18T07:22:16.0000000Z"});
                table204.AddRow(new string[] {
                            "sorting_3",
                            "uniboost",
                            "customer_updated_by_asc",
                            "2020-08-18T07:22:16.0000000Z"});
#line 250
    testRunner.Given("I have bonuses in the system", ((string)(null)), table204, "Given ");
#line hidden
#line 255
    testRunner.And("I submit UpdateBonus request for \'sorting_3\' to expire", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 256
    testRunner.When("I submit CancelBonus request for \'sorting_2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table205 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "sortOrder",
                            "customer_id"});
                table205.AddRow(new string[] {
                            "Status",
                            "Ascending",
                            "customer_updated_by_asc"});
#line 257
    testRunner.And("I submit GetRewards request with the following criteria", ((string)(null)), table205, "And ");
#line hidden
                TechTalk.SpecFlow.Table table206 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "status"});
                table206.AddRow(new string[] {
                            "sorting_1",
                            "ProfitBoost",
                            "customer_updated_by_asc",
                            "Active"});
                table206.AddRow(new string[] {
                            "sorting_2",
                            "UniboostReload",
                            "customer_updated_by_asc",
                            "Cancelled"});
                table206.AddRow(new string[] {
                            "sorting_3",
                            "Uniboost",
                            "customer_updated_by_asc",
                            "Expired"});
#line 260
    testRunner.Then("I expect the results in the following order for sort field \'Status\'", ((string)(null)), table206, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Rewards returns descending records sorted by Status - one expired")]
        public void GetRewardsReturnsDescendingRecordsSortedByStatus_OneExpired()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Rewards returns descending records sorted by Status - one expired", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 266
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table207 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "startDateTime"});
                table207.AddRow(new string[] {
                            "sorting_1",
                            "profitboost",
                            "customer_updated_by_asc",
                            "2018-08-18T07:22:16.0000000Z"});
                table207.AddRow(new string[] {
                            "sorting_2",
                            "uniboostreload",
                            "customer_updated_by_asc",
                            "2019-08-18T07:22:16.0000000Z"});
                table207.AddRow(new string[] {
                            "sorting_3",
                            "uniboost",
                            "customer_updated_by_asc",
                            "2020-08-18T07:22:16.0000000Z"});
#line 267
    testRunner.Given("I have bonuses in the system", ((string)(null)), table207, "Given ");
#line hidden
#line 272
    testRunner.And("I submit UpdateBonus request for \'sorting_3\' to expire", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table208 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "sortOrder",
                            "customer_id"});
                table208.AddRow(new string[] {
                            "Status",
                            "descending",
                            "customer_updated_by_asc"});
#line 273
    testRunner.When("I submit GetRewards request with the following criteria", ((string)(null)), table208, "When ");
#line hidden
                TechTalk.SpecFlow.Table table209 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "status"});
                table209.AddRow(new string[] {
                            "sorting_3",
                            "Uniboost",
                            "customer_updated_by_asc",
                            "Expired"});
                table209.AddRow(new string[] {
                            "sorting_1",
                            "ProfitBoost",
                            "customer_updated_by_asc",
                            "Active"});
                table209.AddRow(new string[] {
                            "sorting_2",
                            "UniboostReload",
                            "customer_updated_by_asc",
                            "Active"});
#line 276
    testRunner.Then("I expect the results in the following order for sort field \'Status\'", ((string)(null)), table209, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Rewards returns descending records sorted by Status - all active - should be " +
            "sorted by start date time")]
        public void GetRewardsReturnsDescendingRecordsSortedByStatus_AllActive_ShouldBeSortedByStartDateTime()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Rewards returns descending records sorted by Status - all active - should be " +
                    "sorted by start date time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 282
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table210 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "startDateTime"});
                table210.AddRow(new string[] {
                            "sorting_1",
                            "profitboost",
                            "customer_updated_by_asc",
                            "2018-08-18T07:22:16.0000000Z"});
                table210.AddRow(new string[] {
                            "sorting_2",
                            "uniboostreload",
                            "customer_updated_by_asc",
                            "2019-08-18T07:22:16.0000000Z"});
                table210.AddRow(new string[] {
                            "sorting_3",
                            "uniboost",
                            "customer_updated_by_asc",
                            "2020-08-18T07:22:16.0000000Z"});
#line 283
    testRunner.Given("I have bonuses in the system", ((string)(null)), table210, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table211 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "sortOrder",
                            "customer_id"});
                table211.AddRow(new string[] {
                            "Status",
                            "descending",
                            "customer_updated_by_asc"});
#line 288
    testRunner.When("I submit GetRewards request with the following criteria", ((string)(null)), table211, "When ");
#line hidden
                TechTalk.SpecFlow.Table table212 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "status"});
                table212.AddRow(new string[] {
                            "sorting_1",
                            "ProfitBoost",
                            "customer_updated_by_asc",
                            "Active"});
                table212.AddRow(new string[] {
                            "sorting_2",
                            "UniboostReload",
                            "customer_updated_by_asc",
                            "Active"});
                table212.AddRow(new string[] {
                            "sorting_3",
                            "Uniboost",
                            "customer_updated_by_asc",
                            "Active"});
#line 291
    testRunner.Then("I expect the results in the following order for sort field \'Status\'", ((string)(null)), table212, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Rewards returns descending records sorted by Status - all active - should be " +
            "sorted by start date time then by name")]
        public void GetRewardsReturnsDescendingRecordsSortedByStatus_AllActive_ShouldBeSortedByStartDateTimeThenByName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Rewards returns descending records sorted by Status - all active - should be " +
                    "sorted by start date time then by name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 297
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table213 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "startDateTime"});
                table213.AddRow(new string[] {
                            "sorting_3",
                            "uniboost",
                            "customer_updated_by_asc",
                            "2018-08-18T07:22:16.0000000Z"});
                table213.AddRow(new string[] {
                            "sorting_1",
                            "profitboost",
                            "customer_updated_by_asc",
                            "2018-08-18T07:22:16.0000000Z"});
                table213.AddRow(new string[] {
                            "sorting_2",
                            "uniboostreload",
                            "customer_updated_by_asc",
                            "2018-08-18T07:22:16.0000000Z"});
#line 298
    testRunner.Given("I have bonuses in the system", ((string)(null)), table213, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table214 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "sortOrder",
                            "customer_id"});
                table214.AddRow(new string[] {
                            "Status",
                            "descending",
                            "customer_updated_by_asc"});
#line 303
    testRunner.When("I submit GetRewards request with the following criteria", ((string)(null)), table214, "When ");
#line hidden
                TechTalk.SpecFlow.Table table215 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "status"});
                table215.AddRow(new string[] {
                            "sorting_1",
                            "ProfitBoost",
                            "customer_updated_by_asc",
                            "Active"});
                table215.AddRow(new string[] {
                            "sorting_2",
                            "UniboostReload",
                            "customer_updated_by_asc",
                            "Active"});
                table215.AddRow(new string[] {
                            "sorting_3",
                            "Uniboost",
                            "customer_updated_by_asc",
                            "Active"});
#line 306
    testRunner.Then("I expect the results in the following order for sort field \'Status\'", ((string)(null)), table215, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Rewards returns descending records sorted by Status - one active, one expired" +
            " and one cancelled")]
        public void GetRewardsReturnsDescendingRecordsSortedByStatus_OneActiveOneExpiredAndOneCancelled()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Rewards returns descending records sorted by Status - one active, one expired" +
                    " and one cancelled", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 312
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table216 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "startDateTime"});
                table216.AddRow(new string[] {
                            "sorting_1",
                            "profitboost",
                            "customer_updated_by_asc",
                            "2018-08-18T07:22:16.0000000Z"});
                table216.AddRow(new string[] {
                            "sorting_2",
                            "uniboostreload",
                            "customer_updated_by_asc",
                            "2019-08-18T07:22:16.0000000Z"});
                table216.AddRow(new string[] {
                            "sorting_3",
                            "uniboost",
                            "customer_updated_by_asc",
                            "2020-08-18T07:22:16.0000000Z"});
#line 313
    testRunner.Given("I have bonuses in the system", ((string)(null)), table216, "Given ");
#line hidden
#line 318
    testRunner.And("I submit UpdateBonus request for \'sorting_3\' to expire", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 319
    testRunner.When("I submit CancelBonus request for \'sorting_2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table217 = new TechTalk.SpecFlow.Table(new string[] {
                            "fieldName",
                            "sortOrder",
                            "customer_id"});
                table217.AddRow(new string[] {
                            "Status",
                            "descending",
                            "customer_updated_by_asc"});
#line 320
    testRunner.And("I submit GetRewards request with the following criteria", ((string)(null)), table217, "And ");
#line hidden
                TechTalk.SpecFlow.Table table218 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "status"});
                table218.AddRow(new string[] {
                            "sorting_3",
                            "Uniboost",
                            "customer_updated_by_asc",
                            "Expired"});
                table218.AddRow(new string[] {
                            "sorting_2",
                            "UniboostReload",
                            "customer_updated_by_asc",
                            "Cancelled"});
                table218.AddRow(new string[] {
                            "sorting_1",
                            "ProfitBoost",
                            "customer_updated_by_asc",
                            "Active"});
#line 323
    testRunner.Then("I expect the results in the following order for sort field \'Status\'", ((string)(null)), table218, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get all bonuses by UpdateDateTime")]
        public void GetAllBonusesByUpdateDateTime()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all bonuses by UpdateDateTime", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 329
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table219 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "expiryDaysFromNow",
                            "countryCode",
                            "startDaysFromNow",
                            "comments"});
                table219.AddRow(new string[] {
                            "uniboost_5_pct_bonus",
                            "uniboost",
                            "321",
                            "",
                            "AUS",
                            "",
                            ""});
                table219.AddRow(new string[] {
                            "uniboost_6_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "RUS",
                            "",
                            ""});
                table219.AddRow(new string[] {
                            "uniboost_7_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "PAK",
                            "1",
                            ""});
                table219.AddRow(new string[] {
                            "uniboost_8_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "USA",
                            "",
                            ""});
                table219.AddRow(new string[] {
                            "uniboost_9_pct_bonus",
                            "uniboost",
                            "123",
                            "time-in-next-daylight-saving-time-shift",
                            "CHN",
                            "",
                            ""});
                table219.AddRow(new string[] {
                            "uniboost_4_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "FRA",
                            "1",
                            ""});
                table219.AddRow(new string[] {
                            "uniboost_3_pct_bonus",
                            "uniboost",
                            "123",
                            "20",
                            "FRA",
                            "10",
                            ""});
                table219.AddRow(new string[] {
                            "uniboost_10_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "BEL",
                            "",
                            "comment_uniboost_10_pct_bonus"});
#line 330
    testRunner.Given("I have bonuses in the system", ((string)(null)), table219, "Given ");
#line hidden
#line 340
    testRunner.When("I UpdateBonus for \'uniboost_5_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 341
    testRunner.Then("I capture the UpdateDateFrom time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 342
    testRunner.When("I UpdateBonus for \'uniboost_6_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 343
    testRunner.When("I UpdateBonus for \'uniboost_7_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 344
    testRunner.When("I UpdateBonus for \'uniboost_8_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 345
    testRunner.Then("I capture the UpdateDateTo time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 346
    testRunner.When("I UpdateBonus for \'uniboost_9_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 347
    testRunner.When("I UpdateBonus for \'uniboost_4_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table220 = new TechTalk.SpecFlow.Table(new string[] {
                            "includeCancelled",
                            "includeExpired",
                            "includeActive"});
                table220.AddRow(new string[] {
                            "true",
                            "true",
                            "true"});
#line 350
    testRunner.When("I submit GetBonuses request for following criteria", ((string)(null)), table220, "When ");
#line hidden
#line 353
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 354
    testRunner.And("the GetBonuses response should not return bonus \'uniboost_5_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 355
    testRunner.And("the GetBonuses response should return bonus \'uniboost_6_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 356
    testRunner.And("the GetBonuses response should return bonus \'uniboost_7_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 357
    testRunner.And("the GetBonuses response should return bonus \'uniboost_8_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 358
    testRunner.And("the GetBonuses response should not return bonus \'uniboost_9_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 359
    testRunner.And("the GetBonuses response should not return bonus \'uniboost_4_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get all bonuses by filter")]
        [NUnit.Framework.CategoryAttribute("bonus")]
        public void GetAllBonusesByFilter()
        {
            string[] tagsOfScenario = new string[] {
                    "bonus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all bonuses by filter", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 363
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table221 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "expiryDaysFromNow",
                            "countryCode",
                            "startDaysFromNow",
                            "comments"});
                table221.AddRow(new string[] {
                            "uniboost_5_pct_bonus",
                            "uniboost",
                            "321",
                            "",
                            "AUS",
                            "",
                            ""});
                table221.AddRow(new string[] {
                            "uniboost_6_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "RUS",
                            "",
                            ""});
                table221.AddRow(new string[] {
                            "uniboost_7_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "PAK",
                            "1",
                            ""});
                table221.AddRow(new string[] {
                            "uniboost_8_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "USA",
                            "",
                            ""});
                table221.AddRow(new string[] {
                            "uniboost_9_pct_bonus",
                            "uniboost",
                            "123",
                            "time-in-next-daylight-saving-time-shift",
                            "CHN",
                            "",
                            ""});
                table221.AddRow(new string[] {
                            "uniboost_4_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "FRA",
                            "1",
                            ""});
                table221.AddRow(new string[] {
                            "uniboost_3_pct_bonus",
                            "uniboost",
                            "123",
                            "20",
                            "FRA",
                            "10",
                            ""});
                table221.AddRow(new string[] {
                            "uniboost_10_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "BEL",
                            "",
                            "comment_uniboost_10_pct_bonus"});
#line 364
    testRunner.Given("I have bonuses in the system", ((string)(null)), table221, "Given ");
#line hidden
#line 375
    testRunner.Given("I submit UpdateBonus request for \'uniboost_4_pct_bonus\' to expire", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table222 = new TechTalk.SpecFlow.Table(new string[] {
                            "includeCancelled",
                            "includeExpired",
                            "includeActive",
                            "customer_id"});
                table222.AddRow(new string[] {
                            "true",
                            "true",
                            "true",
                            "123"});
#line 378
    testRunner.When("I submit GetBonuses request for following criteria", ((string)(null)), table222, "When ");
#line hidden
#line 381
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 382
    testRunner.And("the GetBonuses response should return bonus \'uniboost_4_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table223 = new TechTalk.SpecFlow.Table(new string[] {
                            "includeCancelled",
                            "includeExpired",
                            "includeActive",
                            "customer_id"});
                table223.AddRow(new string[] {
                            "false",
                            "false",
                            "true",
                            "123"});
#line 385
    testRunner.When("I submit GetBonuses request for following criteria", ((string)(null)), table223, "When ");
#line hidden
#line 388
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 389
    testRunner.And("the GetBonuses response should not return bonus \'uniboost_4_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get all bonuses by filter - filter by country")]
        [NUnit.Framework.CategoryAttribute("bonus")]
        public void GetAllBonusesByFilter_FilterByCountry()
        {
            string[] tagsOfScenario = new string[] {
                    "bonus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all bonuses by filter - filter by country", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 392
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table224 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "expiryDaysFromNow",
                            "countryCode",
                            "startDaysFromNow",
                            "comments"});
                table224.AddRow(new string[] {
                            "uniboost_5_pct_bonus",
                            "uniboost",
                            "321",
                            "",
                            "AUS",
                            "",
                            ""});
                table224.AddRow(new string[] {
                            "uniboost_6_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "RUS",
                            "",
                            ""});
                table224.AddRow(new string[] {
                            "uniboost_7_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "PAK",
                            "1",
                            ""});
                table224.AddRow(new string[] {
                            "uniboost_8_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "USA",
                            "",
                            ""});
                table224.AddRow(new string[] {
                            "uniboost_9_pct_bonus",
                            "uniboost",
                            "123",
                            "time-in-next-daylight-saving-time-shift",
                            "CHN",
                            "",
                            ""});
                table224.AddRow(new string[] {
                            "uniboost_4_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "FRA",
                            "1",
                            ""});
                table224.AddRow(new string[] {
                            "uniboost_3_pct_bonus",
                            "uniboost",
                            "123",
                            "20",
                            "FRA",
                            "10",
                            ""});
                table224.AddRow(new string[] {
                            "uniboost_10_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "BEL",
                            "",
                            "comment_uniboost_10_pct_bonus"});
#line 393
    testRunner.Given("I have bonuses in the system", ((string)(null)), table224, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table225 = new TechTalk.SpecFlow.Table(new string[] {
                            "includeCancelled",
                            "includeExpired",
                            "includeActive",
                            "customer_id",
                            "country"});
                table225.AddRow(new string[] {
                            "true",
                            "true",
                            "true",
                            "123",
                            "uSa"});
#line 404
    testRunner.When("I submit GetBonuses request for following criteria", ((string)(null)), table225, "When ");
#line hidden
#line 407
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 408
    testRunner.And("the GetBonuses response should return bonus \'uniboost_8_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 409
    testRunner.And("the GetBonuses response should not return bonus \'uniboost_9_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 410
    testRunner.And("the GetBonuses response should not return bonus \'uniboost_4_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 411
    testRunner.And("the GetBonuses response should not return bonus \'uniboost_3_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 412
    testRunner.And("the GetBonuses response should not return bonus \'uniboost_7_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 413
    testRunner.And("the GetBonuses response should not return bonus \'uniboost_6_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 414
    testRunner.And("the GetBonuses response should not return bonus \'uniboost_5_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get all bonuses by filter - IncludeActive set to true returns scheduled and activ" +
            "e")]
        [NUnit.Framework.CategoryAttribute("bonus")]
        public void GetAllBonusesByFilter_IncludeActiveSetToTrueReturnsScheduledAndActive()
        {
            string[] tagsOfScenario = new string[] {
                    "bonus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all bonuses by filter - IncludeActive set to true returns scheduled and activ" +
                    "e", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 417
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table226 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "expiryDaysFromNow",
                            "countryCode",
                            "startDaysFromNow",
                            "comments"});
                table226.AddRow(new string[] {
                            "uniboost_5_pct_bonus",
                            "uniboost",
                            "321",
                            "",
                            "AUS",
                            "",
                            ""});
                table226.AddRow(new string[] {
                            "uniboost_6_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "RUS",
                            "",
                            ""});
                table226.AddRow(new string[] {
                            "uniboost_7_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "PAK",
                            "1",
                            ""});
                table226.AddRow(new string[] {
                            "uniboost_8_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "USA",
                            "",
                            ""});
                table226.AddRow(new string[] {
                            "uniboost_9_pct_bonus",
                            "uniboost",
                            "123",
                            "time-in-next-daylight-saving-time-shift",
                            "CHN",
                            "",
                            ""});
                table226.AddRow(new string[] {
                            "uniboost_4_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "FRA",
                            "1",
                            ""});
                table226.AddRow(new string[] {
                            "uniboost_3_pct_bonus",
                            "uniboost",
                            "123",
                            "20",
                            "FRA",
                            "10",
                            ""});
                table226.AddRow(new string[] {
                            "uniboost_10_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "BEL",
                            "",
                            "comment_uniboost_10_pct_bonus"});
#line 418
    testRunner.Given("I have bonuses in the system", ((string)(null)), table226, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table227 = new TechTalk.SpecFlow.Table(new string[] {
                            "includeCancelled",
                            "includeExpired",
                            "includeActive",
                            "customer_id"});
                table227.AddRow(new string[] {
                            "false",
                            "false",
                            "true",
                            "123"});
#line 429
    testRunner.When("I submit GetBonuses request for following criteria", ((string)(null)), table227, "When ");
#line hidden
#line 432
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 433
    testRunner.And("the GetBonuses response should return bonus \'uniboost_6_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 434
    testRunner.And("the GetBonuses response should return bonus \'uniboost_7_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 435
    testRunner.And("the GetBonuses response should return bonus \'uniboost_8_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 436
    testRunner.And("the GetBonuses response should return bonus \'uniboost_9_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 437
    testRunner.And("the GetBonuses response should return bonus \'uniboost_4_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 438
    testRunner.And("the GetBonuses response should return bonus \'uniboost_3_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get all bonuses by customer ID")]
        [NUnit.Framework.CategoryAttribute("bonus")]
        public void GetAllBonusesByCustomerID()
        {
            string[] tagsOfScenario = new string[] {
                    "bonus"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all bonuses by customer ID", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 441
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table228 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "customer_id",
                            "expiryDaysFromNow",
                            "countryCode",
                            "startDaysFromNow",
                            "comments"});
                table228.AddRow(new string[] {
                            "uniboost_5_pct_bonus",
                            "uniboost",
                            "321",
                            "",
                            "AUS",
                            "",
                            ""});
                table228.AddRow(new string[] {
                            "uniboost_6_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "RUS",
                            "",
                            ""});
                table228.AddRow(new string[] {
                            "uniboost_7_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "PAK",
                            "1",
                            ""});
                table228.AddRow(new string[] {
                            "uniboost_8_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "USA",
                            "",
                            ""});
                table228.AddRow(new string[] {
                            "uniboost_9_pct_bonus",
                            "uniboost",
                            "123",
                            "time-in-next-daylight-saving-time-shift",
                            "CHN",
                            "",
                            ""});
                table228.AddRow(new string[] {
                            "uniboost_4_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "FRA",
                            "1",
                            ""});
                table228.AddRow(new string[] {
                            "uniboost_3_pct_bonus",
                            "uniboost",
                            "123",
                            "20",
                            "FRA",
                            "10",
                            ""});
                table228.AddRow(new string[] {
                            "uniboost_10_pct_bonus",
                            "uniboost",
                            "123",
                            "",
                            "BEL",
                            "",
                            "comment_uniboost_10_pct_bonus"});
#line 442
    testRunner.Given("I have bonuses in the system", ((string)(null)), table228, "Given ");
#line hidden
#line 453
    testRunner.When("I submit GetBonuses request with customer id \'321\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 454
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 455
    testRunner.And("GetBonuses response should return all bonuses with name \'uniboost_5_pct_bonus\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get promotion with templates")]
        [NUnit.Framework.CategoryAttribute("promotion")]
        public void GetPromotionWithTemplates()
        {
            string[] tagsOfScenario = new string[] {
                    "promotion"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get promotion with templates", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 459
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table229 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "expiryDaysFromNow",
                            "startDaysFromNow"});
                table229.AddRow(new string[] {
                            "uniboost_5_pct",
                            "uniboost",
                            "",
                            ""});
                table229.AddRow(new string[] {
                            "uniboost_6_pct",
                            "uniboost",
                            "",
                            ""});
                table229.AddRow(new string[] {
                            "uniboost_7_pct",
                            "uniboost",
                            "",
                            "1"});
                table229.AddRow(new string[] {
                            "uniboost_8_pct",
                            "uniboost",
                            "",
                            ""});
                table229.AddRow(new string[] {
                            "uniboost_9_pct",
                            "uniboost",
                            "time-in-next-daylight-saving-time-shift",
                            "1"});
                table229.AddRow(new string[] {
                            "uniboost_4_pct",
                            "uniboost",
                            "",
                            "1"});
#line 460
    testRunner.Given("I have promotions in the system", ((string)(null)), table229, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table230 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "comments"});
                table230.AddRow(new string[] {
                            "freebet",
                            "freebet promo"});
                table230.AddRow(new string[] {
                            "uniboost",
                            "uniboost promo"});
#line 468
    testRunner.Given("I have promotions templates in the system", ((string)(null)), table230, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table231 = new TechTalk.SpecFlow.Table(new string[] {
                            "template_key",
                            "promotions"});
                table231.AddRow(new string[] {
                            "freebet",
                            "uniboost_5_pct"});
                table231.AddRow(new string[] {
                            "uniboost",
                            "uniboost_5_pct,uniboost_6_pct"});
#line 473
    testRunner.When("I submit CreateMapping request for following promotions:", ((string)(null)), table231, "When ");
#line hidden
#line 477
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 479
    testRunner.When("I submit GetPromotion request for \'uniboost_5_pct\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 480
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 481
    testRunner.And("the GetPromotion response should return promotion \'uniboost_5_pct\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 482
    testRunner.And("the GetPromotion response should return promotion templates \'freebet,uniboost\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 484
    testRunner.When("I submit GetPromotion request for \'uniboost_6_pct\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 485
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 486
    testRunner.And("the GetPromotion response should return promotion \'uniboost_6_pct\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 487
    testRunner.And("the GetPromotion response should return promotion templates \'uniboost\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get promotions with templates")]
        [NUnit.Framework.CategoryAttribute("promotion")]
        public void GetPromotionsWithTemplates()
        {
            string[] tagsOfScenario = new string[] {
                    "promotion"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get promotions with templates", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 490
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table232 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "rewardType",
                            "expiryDaysFromNow",
                            "startDaysFromNow"});
                table232.AddRow(new string[] {
                            "uniboost_5_pct",
                            "uniboost",
                            "",
                            ""});
                table232.AddRow(new string[] {
                            "uniboost_6_pct",
                            "uniboost",
                            "",
                            ""});
                table232.AddRow(new string[] {
                            "uniboost_7_pct",
                            "uniboost",
                            "",
                            "1"});
                table232.AddRow(new string[] {
                            "uniboost_8_pct",
                            "uniboost",
                            "",
                            ""});
                table232.AddRow(new string[] {
                            "uniboost_9_pct",
                            "uniboost",
                            "time-in-next-daylight-saving-time-shift",
                            "1"});
                table232.AddRow(new string[] {
                            "uniboost_4_pct",
                            "uniboost",
                            "",
                            "1"});
#line 491
    testRunner.Given("I have promotions in the system", ((string)(null)), table232, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table233 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "comments"});
                table233.AddRow(new string[] {
                            "freebet",
                            "freebet promo"});
                table233.AddRow(new string[] {
                            "uniboost",
                            "uniboost promo"});
#line 499
    testRunner.Given("I have promotions templates in the system", ((string)(null)), table233, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table234 = new TechTalk.SpecFlow.Table(new string[] {
                            "template_key",
                            "promotions"});
                table234.AddRow(new string[] {
                            "freebet",
                            "uniboost_5_pct"});
                table234.AddRow(new string[] {
                            "uniboost",
                            "uniboost_5_pct"});
#line 504
    testRunner.When("I submit CreateMapping request for following promotions:", ((string)(null)), table234, "When ");
#line hidden
#line 508
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 510
    testRunner.When("I submit GetPromotions request with name \'uniboost_5_pct\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 511
    testRunner.Then("the HttpStatusCode should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 512
    testRunner.And("GetPromotions response should return all promotions with name \'uniboost_5_pct\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 513
    testRunner.And("the GetPromotions response should return promotion templates \'freebet,uniboost\' f" +
                        "or promotion \'uniboost_5_pct\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
