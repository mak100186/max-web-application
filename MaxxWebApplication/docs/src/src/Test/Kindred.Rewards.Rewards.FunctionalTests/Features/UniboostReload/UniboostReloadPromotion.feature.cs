// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kindred.Rewards.Rewards.FunctionalTests.Features.UniboostReload
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UniboostReloadPromotion")]
    [NUnit.Framework.CategoryAttribute("Acceptance")]
    public partial class UniboostReloadPromotionFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Acceptance"};
        
#line 1 "UniboostReloadPromotion.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UniboostReload", "UniboostReloadPromotion", "\tIn order to keep customers betting with us\r\n\tAs a business\r\n\tI want to offer the" +
                    "m reload on UniboostReload promotion until they win", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a UniboostReload promotion - red path")]
        [NUnit.Framework.CategoryAttribute("uniboost-reload")]
        public void CreateAUniboostReloadPromotion_RedPath()
        {
            string[] tagsOfScenario = new string[] {
                    "uniboost-reload"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a UniboostReload promotion - red path", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table267 = new TechTalk.SpecFlow.Table(new string[] {
                            "rewardType",
                            "claimsPerInterval",
                            "enableReload",
                            "maxReload",
                            "stopOnMinimumWinBets"});
                table267.AddRow(new string[] {
                            "UniboostReload",
                            "null",
                            "true",
                            "1",
                            "1"});
#line 9
 testRunner.When("I submit CreatePromotion request for UniboostReload with the following reload opt" +
                        "ions", ((string)(null)), table267, "When ");
#line hidden
#line 12
 testRunner.Then("the HttpStatusCode should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
 testRunner.And("Response should contain error \'Reload configuration is not required if ClaimsPerI" +
                        "nterval is null\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table268 = new TechTalk.SpecFlow.Table(new string[] {
                            "rewardType",
                            "claimsPerInterval",
                            "enableReload",
                            "maxReload",
                            "stopOnMinimumWinBets"});
                table268.AddRow(new string[] {
                            "UniboostReload",
                            "1",
                            "true",
                            "0",
                            "1"});
                table268.AddRow(new string[] {
                            "UniboostReload",
                            "1",
                            "true",
                            "null",
                            "1"});
#line 15
 testRunner.When("I submit CreatePromotion request for UniboostReload with the following reload opt" +
                        "ions", ((string)(null)), table268, "When ");
#line hidden
#line 19
 testRunner.Then("the HttpStatusCode should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
 testRunner.And("Response should contain error \'MaxReload should be null or greater than 0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table269 = new TechTalk.SpecFlow.Table(new string[] {
                            "rewardType",
                            "claimsPerInterval",
                            "enableReload",
                            "maxReload",
                            "stopOnMinimumWinBets"});
                table269.AddRow(new string[] {
                            "UniboostReload",
                            "1",
                            "true",
                            "2",
                            "0"});
#line 22
 testRunner.When("I submit CreatePromotion request for UniboostReload with the following reload opt" +
                        "ions", ((string)(null)), table269, "When ");
#line hidden
#line 25
 testRunner.Then("the HttpStatusCode should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.And("Response should contain error \'StopOnMinimumWinBets should be greater than 0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a UniboostReload promotion")]
        [NUnit.Framework.CategoryAttribute("uniboost-reload")]
        public void CreateAUniboostReloadPromotion()
        {
            string[] tagsOfScenario = new string[] {
                    "uniboost-reload"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a UniboostReload promotion", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table270 = new TechTalk.SpecFlow.Table(new string[] {
                            "rewardType",
                            "claimsPerInterval",
                            "enableReload",
                            "maxReload",
                            "stopOnMinimumWinBets"});
                table270.AddRow(new string[] {
                            "UniboostReload",
                            "1",
                            "true",
                            "1",
                            "1"});
#line 30
 testRunner.When("I submit CreatePromotion request for UniboostReload with the following reload opt" +
                        "ions", ((string)(null)), table270, "When ");
#line hidden
#line 33
 testRunner.Then("the HttpStatusCode should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
 testRunner.And("UniboostReload promotion should have been created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
