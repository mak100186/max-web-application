// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kindred.Rewards.Rewards.FunctionalTests.Features.UniboostReload.Entitlement
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GetEntitlements")]
    [NUnit.Framework.CategoryAttribute("Acceptance")]
    [NUnit.Framework.CategoryAttribute("uniboostreload")]
    public partial class GetEntitlementsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Acceptance",
                "uniboostreload"};
        
#line 1 "GetEntitlements.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UniboostReload/Entitlement", "GetEntitlements", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table252 = new TechTalk.SpecFlow.Table(new string[] {
                        "combinationRn",
                        "selectionOutcomes"});
            table252.AddRow(new string[] {
                        "ksp:combination.1:c0640978-231d-405c-8ff5-f767b57a5eac:1:1",
                        "barcaWin,brazilLose"});
#line 5
    testRunner.Given("a bet \'ksp:bet.1:c0640978-231d-405c-8ff5-f767b57a5eac:1\' for customer \'123456\' th" +
                    "at has formulae \'singles\' and stake \'14\' with the combinations:", ((string)(null)), table252, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table253 = new TechTalk.SpecFlow.Table(new string[] {
                        "outcome",
                        "price",
                        "market"});
            table253.AddRow(new string[] {
                        "barcaWin",
                        "1.2",
                        "ksp:market.1:[football:201711202200:barca_vs_liverpool]:1x2"});
#line 8
    testRunner.And("the bet \'ksp:bet.1:c0640978-231d-405c-8ff5-f767b57a5eac:1\' has the following stag" +
                    "es:", ((string)(null)), table253, "And ");
#line hidden
            TechTalk.SpecFlow.Table table254 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "rewardType",
                        "allowedFormulae",
                        "minStages",
                        "maxStages",
                        "minCombinations",
                        "maxCombinations",
                        "customer_id",
                        "claimsPerInterval",
                        "maxReload",
                        "stopOnMinimumWinBets"});
            table254.AddRow(new string[] {
                        "uniboostreload_reward_1",
                        "uniboostreload",
                        "singles",
                        "1",
                        "1",
                        "1",
                        "1",
                        "123456",
                        "2",
                        "3",
                        "2"});
#line 12
    testRunner.Given("I have bonuses in the system", ((string)(null)), table254, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table255 = new TechTalk.SpecFlow.Table(new string[] {
                        "customer_id",
                        "template_keys"});
            table255.AddRow(new string[] {
                        "123456",
                        ""});
#line 15
    testRunner.When("I submit GetEntitlement request for following criteria:", ((string)(null)), table255, "When ");
#line hidden
            TechTalk.SpecFlow.Table table256 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "betRn"});
            table256.AddRow(new string[] {
                        "uniboostreload_reward_1",
                        "ksp:bet.1:c0640978-231d-405c-8ff5-f767b57a5eac:1"});
#line 18
    testRunner.And("a request to claim an entitlement is received for customer \'123456\':", ((string)(null)), table256, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When entitlements are retrieved for UniBoostReload which had an associated lost b" +
            "et remaining claims should not be reduced")]
        [NUnit.Framework.CategoryAttribute("singles")]
        public void WhenEntitlementsAreRetrievedForUniBoostReloadWhichHadAnAssociatedLostBetRemainingClaimsShouldNotBeReduced()
        {
            string[] tagsOfScenario = new string[] {
                    "singles"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When entitlements are retrieved for UniBoostReload which had an associated lost b" +
                    "et remaining claims should not be reduced", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table257 = new TechTalk.SpecFlow.Table(new string[] {
                            "combinationRn",
                            "settlementStatus",
                            "segmentStatuses"});
                table257.AddRow(new string[] {
                            "ksp:combination.1:c0640978-231d-405c-8ff5-f767b57a5eac:1:1",
                            "Resolved",
                            "Lost"});
#line 24
    testRunner.When("a request to settle the claim is received for bet \'ksp:bet.1:c0640978-231d-405c-8" +
                        "ff5-f767b57a5eac:1\' with final payoff \'12\' and combination settlement statuses:", ((string)(null)), table257, "When ");
#line hidden
                TechTalk.SpecFlow.Table table258 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "template_keys"});
                table258.AddRow(new string[] {
                            "123456",
                            ""});
#line 27
    testRunner.And("I submit GetEntitlement request for following criteria:", ((string)(null)), table258, "And ");
#line hidden
                TechTalk.SpecFlow.Table table259 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "remainingClaimsPerInterval"});
                table259.AddRow(new string[] {
                            "uniboostreload_reward_1",
                            "2"});
#line 30
    testRunner.Then("the entitlements for customer \'123456\' should contain:", ((string)(null)), table259, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When entitlements are retrieved for UniBoostReload which had an associated won be" +
            "t remaining claims should be reduced")]
        [NUnit.Framework.CategoryAttribute("singles")]
        public void WhenEntitlementsAreRetrievedForUniBoostReloadWhichHadAnAssociatedWonBetRemainingClaimsShouldBeReduced()
        {
            string[] tagsOfScenario = new string[] {
                    "singles"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When entitlements are retrieved for UniBoostReload which had an associated won be" +
                    "t remaining claims should be reduced", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table260 = new TechTalk.SpecFlow.Table(new string[] {
                            "combinationRn",
                            "settlementStatus",
                            "segmentStatuses"});
                table260.AddRow(new string[] {
                            "ksp:combination.1:c0640978-231d-405c-8ff5-f767b57a5eac:1:1",
                            "Resolved",
                            "Won"});
#line 36
    testRunner.When("a request to settle the claim is received for bet \'ksp:bet.1:c0640978-231d-405c-8" +
                        "ff5-f767b57a5eac:1\' with final payoff \'12\' and combination settlement statuses:", ((string)(null)), table260, "When ");
#line hidden
                TechTalk.SpecFlow.Table table261 = new TechTalk.SpecFlow.Table(new string[] {
                            "customer_id",
                            "template_keys"});
                table261.AddRow(new string[] {
                            "123456",
                            ""});
#line 39
    testRunner.And("I submit GetEntitlement request for following criteria:", ((string)(null)), table261, "And ");
#line hidden
                TechTalk.SpecFlow.Table table262 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "remainingClaimsPerInterval"});
                table262.AddRow(new string[] {
                            "uniboostreload_reward_1",
                            "1"});
#line 42
    testRunner.Then("the entitlements for customer \'123456\' should contain:", ((string)(null)), table262, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
