using AutoMapper;

using Kindred.Rewards.Core.Enums;
using Kindred.Rewards.Core.Extensions;
using Kindred.Rewards.Core.Mapping;
using Kindred.Rewards.Core.Models;
using Kindred.Rewards.Core.Models.RewardConfiguration;
using Kindred.Rewards.Core.WebApi.Payloads;
using Kindred.Rewards.Plugin.Reward.Models;

namespace Kindred.Rewards.Plugin.Reward.Mappings;

public class RewardApiToDomainMapping : Profile
{
    public RewardApiToDomainMapping()
    {
        CreateMap<RewardRequest, RewardDomainModel>(MemberList.None)
            .ForMember(d => d.CustomerId, opt => opt.MapFrom(s => s.CustomerId))
            .ForMember(d => d.Name, opt => opt.MapFrom(s => s.Name))
            .ForMember(d => d.Comments, opt => opt.MapFrom(s => s.Comments))
            .ForMember(d => d.Category, opt => opt.MapFrom(s => Enum.Parse<RewardType>(s.RewardType).ToRewardCategory()))
            .ForMember(d => d.IsNameAutoGenerated, opt => opt.MapFrom(s => s.IsNameAutoGenerated))
            .ForMember(d => d.Type, opt => opt.MapFrom(s => s.RewardType))
            .ForMember(d => d.RewardId, opt => opt.MapFrom(s => Guid.NewGuid().ToString()))
            .ForMember(d => d.Tags, opt => opt.MapFrom(s => s.Tags))
            .ForMember(d => d.CountryCode, opt => opt.MapFrom(s => s.CountryCode.Trim().ToUpperInvariant()))
            .ForMember(d => d.Jurisdiction, opt => opt.MapFrom(s => s.Jurisdiction != null ? s.Jurisdiction.Trim().ToUpperInvariant() : null))
            .ForMember(d => d.State, opt => opt.MapFrom(s => s.State != null ? s.State.Trim().ToUpperInvariant() : null))
            .ForMember(d => d.CurrencyCode, opt => opt.MapFrom(s => s.CurrencyCode != null ? s.CurrencyCode.Trim().ToUpperInvariant() : null))
            .ForMember(d => d.Brand, opt => opt.MapFrom(s => s.Brand != null ? s.Brand.Trim().ToUpperInvariant() : null))
            .ForMember(d => d.Purpose, opt => opt.MapFrom(s => s.Purpose))
            .ForMember(d => d.SubPurpose, opt => opt.MapFrom(s => s.SubPurpose))
            .ForMember(d => d.CustomerFacingName, opt => opt.MapFrom(s => s.CustomerFacingName))
            .ForMember(d => d.CurrencyCode, opt => opt.MapFrom(s => s.CurrencyCode))
            .ForMember(d => d.CreatedBy, opt => opt.MapFrom(s => s.CreatedBy))
            .ForMember(d => d.UpdatedBy, opt => opt.MapFrom(s => s.UpdatedBy))
            .ForPath(d => d.Terms.Restrictions, opt => opt.MapFrom(s => s.Restrictions))
            .AfterMap(
                (request, model) =>
                {
                    model.Terms.RewardParameters = MapFromRewardParametersToDictionary(request.RewardParameters, request.RewardType);
                    model.Terms.Restrictions.Reload =
                        MapFromRewardParametersToRewardReload(request.RewardParameters, request.RewardType);

                    model.Terms.Attributes = new Dictionary<string, string>();

                    if (request.DomainRestriction?.MultiConfig?.MinStages != null)
                    {
                        model.Terms.RewardParameters[RewardParameterKey.MinStages] = request.DomainRestriction?.MultiConfig?.MinStages?.ToString();
                    }

                    if (request.DomainRestriction?.MultiConfig?.MaxStages != null)
                    {
                        model.Terms.RewardParameters[RewardParameterKey.MaxStages] = request.DomainRestriction?.MultiConfig?.MaxStages?.ToString();
                    }

                    if (request.DomainRestriction?.MultiConfig?.MinCombinations != null)
                    {
                        model.Terms.RewardParameters[RewardParameterKey.MinCombinations] = request.DomainRestriction?.MultiConfig?.MinCombinations?.ToString();
                    }

                    if (request.DomainRestriction?.MultiConfig?.MaxCombinations != null)
                    {
                        model.Terms.RewardParameters[RewardParameterKey.MaxCombinations] = request.DomainRestriction?.MultiConfig?.MaxCombinations?.ToString();
                    }

                    if (request.DomainRestriction?.MultiConfig?.FilterFormulae != null)
                    {
                        model.Terms.RewardParameters[RewardParameterKey.AllowedFormulae] = string.Join(",", request.DomainRestriction.MultiConfig.FilterFormulae);
                    }

                    foreach (var attribute in request.Attributes)
                    {
                        model.Terms.Attributes.Add(attribute.Key, attribute.Value);
                    }

                    model.Terms.Restrictions.AllowedContestRefs = request.DomainRestriction?.FilterContestRefs;
                    model.Terms.Restrictions.AllowedContestTypes = request.DomainRestriction?.FilterContestTypes;
                    model.Terms.Restrictions.AllowedContestCategories = request.DomainRestriction?.FilterContestCategories;
                    model.Terms.Restrictions.AllowedOutcomes = request.DomainRestriction?.FilterOutcomes;

                    var contestStatus = request.DomainRestriction?.FilterContestStatuses?.ToString();
                    model.Terms.Restrictions.AllowedContestStatuses = string.IsNullOrWhiteSpace(contestStatus) ? null : Enum.Parse<ContestStatus>(contestStatus);

                    model.Terms.Restrictions.OddLimits = new()
                    {
                        MinimumStageOdds = request.DomainRestriction?.OddLimits?.MinimumStageOdds,
                        MinimumCompoundOdds = request.DomainRestriction?.OddLimits?.MinimumCompoundOdds
                    };

                });
    }

    private static RewardReloadConfig MapFromRewardParametersToRewardReload(RewardParameterApiModelBase rewardParameterApiModel,
        string rewardType)
    {
        return RewardParameterMappingHelper.MapFromRewardParametersToRewardReload(rewardParameterApiModel, rewardType);
    }

    private static Dictionary<string, string> MapFromRewardParametersToDictionary(
        RewardParameterApiModelBase rewardParameterApiModel,
        string rewardType)
    {
        return RewardParameterMappingHelper.MapFromRewardParametersToDictionary(rewardParameterApiModel, rewardType);
    }
}
